version: 2.0
jobs:
  build:
    docker:
      - image: swagchat/build-base:1.1.0
    working_directory: /go/src/github.com/swagchat/chat-api
    environment:
      - GOCACHE: /tmp/go/cache
    steps:
      - checkout
      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.lock" }}
            - dep
      - run:
          name: Resolving dependencies
          command: |
            if [ ! -d vendor ]; then
              if ! type dep >/dev/null 2>&1; then
                go get github.com/golang/dep/cmd/dep
              fi
              dep ensure
            fi
      - save_cache:
          key: vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
      - save_cache:
          key: dep
          paths:
            - /go/bin/dep
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}--
            - build-cache-master--
            - build-cache-
      - run:
          name: Building
          command: go build
      - save_cache:
          key: build-cache-{{ .Branch }}--{{ .Revision }}
          paths:
              - /tmp/go/cache
          when: on_fail
      - persist_to_workspace:
          root: /
          paths:
            - tmp/go/cache

  test:
    docker:
      - image: swagchat/build-base:1.1.0
    working_directory: /go/src/github.com/swagchat/chat-api
    environment:
      - TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - run:
          name: Preparing a test report to CodeClimate
          command: cc-test-reporter before-build
      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.lock" }}
      - attach_workspace:
          at: /
      - run:
          name: Testing
          command: |
            go test -v ./... | tee ${TEST_RESULTS}/go-test.out
            # go test --race -v ./... | tee ${TEST_RESULTS}/go-test.out
            go-junit-report <${TEST_RESULTS}/go-test.out > $TEST_RESULTS/go-test-report.xml
      - save_cache:
          key: build-cache-{{ .Branch }}--{{ .Revision }}
          paths:
              - /tmp/go/cache
          when: always
      - store_artifacts:
          path: /tmp/test-results
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Analyzing test coverage
          command: |
            go test -coverprofile c.out ./...
            cp c.out $TEST_RESULTS/go-cover.out
      - run:
          name: Uploading a test report to CodeClimate
          command: cc-test-reporter after-build

  deploy-heroku-master:
    docker:
      - image: swagchat/heroku-docker-deploy
    working_directory: /go/src/github.com/swagchat/chat-api
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # Paid members only
      - run: .circleci/setup-heroku-auth.sh
      - add_ssh_keys:
          fingerprints:
          - "cd:da:d5:e9:31:fd:50:0a:54:1e:6e:4f:7e:2f:20:b3"
      - run:
          name: Deploy main branch to heroku
          command: |
            heroku container:login
            if [ `heroku apps | grep chat-api-mainline | wc -l` == 0 ]; then
              heroku apps:create chat-api-mainline
            fi
            heroku container:push web --app chat-api-mainline
            heroku container:release web --app chat-api-mainline

  deploy-heroku-develop:
    docker:
      - image: swagchat/heroku-docker-deploy
    working_directory: /go/src/github.com/swagchat/chat-api
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # Paid members only
      - run: .circleci/setup-heroku-auth.sh
      - add_ssh_keys:
          fingerprints:
          - "cd:da:d5:e9:31:fd:50:0a:54:1e:6e:4f:7e:2f:20:b3"
      - run:
          name: Deploy current branch to heroku
          command: |
            heroku container:login
            if [ `heroku apps | grep chat-api-$CIRCLE_BRANCH | wc -l` == 0 ]; then
              heroku apps:create chat-api-$CIRCLE_BRANCH
            fi
            heroku container:push web --app chat-api-$CIRCLE_BRANCH
            heroku container:release web --app chat-api-$CIRCLE_BRANCH

  deploy-heroku-tag:
    docker:
      - image: swagchat/heroku-docker-deploy
    working_directory: /go/src/github.com/swagchat/chat-api
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # Paid members only
      - run: .circleci/setup-heroku-auth.sh
      - add_ssh_keys:
          fingerprints:
          - "cd:da:d5:e9:31:fd:50:0a:54:1e:6e:4f:7e:2f:20:b3"
      - run:
          name: Deploy current tag to heroku
          command: |
            heroku container:login
            if [ `heroku apps | grep chat-api-$CIRCLE_TAG | wc -l` == 0 ]; then
              heroku apps:create chat-api-$CIRCLE_TAG
            fi
            heroku container:push web --app chat-api-$CIRCLE_TAG
            heroku container:release web --app chat-api-$CIRCLE_TAG

  docker-build-push:
    docker:
      - image: docker:18.06.0-ce-git
    working_directory: /go/src/github.com/swagchat/chat-api
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # Paid members only
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/chat-api
      - run:
          name: Loading docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/chat-api | true
      - run:
          name: Building docker image
          command: |
            docker build --cache-from=chat-api -t swagchat/chat-api:$CIRCLE_TAG .
      - run:
          name: Saving docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/chat-api chat-api
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/chat-api
      - run:
          name: Uploading docker image to docker hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            docker push swagchat/chat-api:$CIRCLE_TAG

workflows:
  version: 2
  chat-api:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              ignore: /.*/
      - deploy-heroku-master:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy-heroku-develop:
          requires:
            - test
          filters:
            branches:
              ignore: master
      - deploy-heroku-tag:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              only: master
      - docker-build-push:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              only: master