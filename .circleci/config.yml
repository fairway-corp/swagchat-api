version: 2.0
jobs:
  build:
    docker:
      - image: swagchat/build-base:1.0.0
    working_directory: /go/src/github.com/swagchat/chat-api
    environment:
      - GOCACHE: "/tmp/go/cache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.lock" }}
            - dep
      - run:
          name: ensure
          command: |
            if [ ! -d vendor ]; then
              if ! type dep >/dev/null 2>&1; then
                go get github.com/golang/dep/cmd/dep
              fi
              dep ensure
            fi
      - save_cache:
          key: vendor-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
      - save_cache:
          key: dep
          paths:
            - /go/bin/dep
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}--
            - build-cache-master--
            - build-cache-
      - run:
          name: build
          command: go build
      - save_cache:
          key: build-cache-{{ .Branch }}--{{ .Revision }}
          paths:
              - /tmp/go/cache
          when: on_fail
      - persist_to_workspace:
          root: /
          paths:
            - tmp/go/cache

  test:
    docker:
      - image: swagchat/build-base:1.0.0
    working_directory: /go/src/github.com/swagchat/chat-api
    environment:
      - GOCACHE: "/tmp/go/cache"
    steps:
      - checkout
      - run:
          name: CodeClimate before-build
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.lock" }}
      - attach_workspace:
          at: /
      - run:
          name: "testing golang"
          command: go test -race -covermode=atomic -coverprofile=coverage.out ./...
      - save_cache:
          key: build-cache-{{ .Branch }}--{{ .Revision }}
          paths:
              - /tmp/go/cache
          when: always
      - run:
          name: CodeClimate upload coverage
          command: |
            # Attempt to submit the coverage report, but don't fail the build if this fails (`|| true`)
            ./cc-test-reporter upload-coverage || true
  # detect:
  # docker-build:
  #   docker:
  #     - image: docker:18.06.0-ce-git
  #   working_directory: /go/src/github.com/swagchat/chat-api
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - restore_cache:
  #         keys:
  #           - v1-{{ .Branch }}
  #         paths:
  #           - /caches/chat-api
  #     - run:
  #         name: Load Docker image layer cache
  #         command: |
  #           set +o pipefail
  #           docker load -i /caches/chat-api | true
  #     - run:
  #         name: Build application Docker image
  #         command: |
  #           docker build --cache-from=chat-api -t chat-api .
  #     - run:
  #         name: Save Docker image layer cache
  #         command: |
  #           mkdir -p /caches
  #           docker save -o /caches/chat-api chat-api
  #     - save_cache:
  #         key: v1-{{ .Branch }}-{{ epoch }}
  #         paths:
  #           - /caches/chat-api
  #     - run:
  #         name: "run docker build"
  #         command: |
  #           docker build -t swagchat/chat-api .
  # deploy-prod:
  #   docker:
  #     - image: ubuntu:14.04
  #   working_directory: /tmp/my-project
  #   steps:
  #     - run:
  #         name: Deploy if tests pass and branch is Master
  #         command: ansible-playbook site.yml -i production
workflows:
  version: 2
  build-test:
    jobs:
      - build
      - test
      - deploy-dev:
          requires:
            - build
          filters:
            branches:
              only: develop
      - deploy-stage:
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy-prod:
          requires:
            - build
          filters:
            branches:
              only: master
