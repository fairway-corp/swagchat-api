FORMAT: 1A

# Swagchat RESTful API

### /v0/users

#### Create user item. [POST]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "name": "nostrud sunt dolor est officia",
              "informationUrl": "exercitation nulla ea"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
              "userId": "enim anim do",
              "name": "sit anim",
              "pictureUrl": "adipisicing enim officia dolor",
              "unreadCount": 85921649,
              "created": -99241246,
              "modified": -97447155
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "name",
                "pictureUrl",
                "unreadCount",
                "metaData",
                "created",
                "modified"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "custom-user-id-0001"
                },
                "name": {
                  "type": "string",
                  "example": "custom user 0001"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "name": "consectetur ali"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "Ut",
              "status": 47734855,
              "errorName": "ipsum non "
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "name": "officia enim",
              "unreadCount": -26203649,
              "informationUrl": "ullamco pariatur"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "fugiat",
              "status": -21349581,
              "errorName": "anim",
              "detail": "Excepteur pariatur velit elit"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Get user list. [GET]

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "users": [
                {
                  "userId": "sunt sit nisi exercitation sed",
                  "name": "ullamco sit",
                  "pictureUrl": "sed dolore sint velit deserunt",
                  "unreadCount": -88908781,
                  "created": -697667,
                  "modified": 12709635
                },
                {
                  "userId": "laborum aute dolor",
                  "name": "occaecat fugiat magna",
                  "pictureUrl": "proident fugiat nostrud ipsum occaecat",
                  "unreadCount": -50936323,
                  "created": -80292128,
                  "modified": -85901116,
                  "informationUrl": "esse commod"
                },
                {
                  "userId": "commodo ex consectetur ea",
                  "name": "adipisicing laborum occaecat",
                  "pictureUrl": "commodo",
                  "unreadCount": -85092401,
                  "created": 66179171,
                  "modified": 26039344
                },
                {
                  "userId": "cupidatat aliqua",
                  "name": "enim do",
                  "pictureUrl": "tempor cillum ea Ut",
                  "unreadCount": -12195162,
                  "created": -43674763,
                  "modified": 33823593,
                  "informationUrl": "commodo sit amet exercitation"
                },
                {
                  "userId": "cillum ex tempor aute",
                  "name": "in labore",
                  "pictureUrl": "ipsum",
                  "unreadCount": 75507446,
                  "created": -65391583,
                  "modified": 23940002
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "users"
              ],
              "properties": {
                "users": {
                  "items": {
                    "type": "object",
                    "required": [
                      "userId",
                      "name",
                      "pictureUrl",
                      "unreadCount",
                      "metaData",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "userId": {
                        "type": "string",
                        "example": "custom-user-id-0001"
                      },
                      "name": {
                        "type": "string",
                        "example": "custom user 0001"
                      },
                      "pictureUrl": {
                        "type": "string",
                        "example": "http://example.com/img/rick.png"
                      },
                      "informationUrl": {
                        "type": "string",
                        "example": "http://example.com/user/rick"
                      },
                      "unreadCount": {
                        "type": "integer",
                        "example": 0
                      },
                      "metaData": {
                        "type": "object",
                        "example": {
                          "key": "value"
                        }
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "proident pariatur velit aliqua occaecat",
              "status": 62053128,
              "errorName": "do magna ut in veniam",
              "detail": "deserunt"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/users/{userId}

#### Get user item. [GET]

+ Parameters

    + userId: custom-user-id-0001 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "userId": "",
              "name": "proident consequat officia Lorem et",
              "pictureUrl": "qui consectetur",
              "unreadCount": -89544121,
              "created": -53940673,
              "modified": -96363393,
              "rooms": [
                {
                  "roomId": "deserunt laboris labor",
                  "userId": "irure ullamco dolore amet ea",
                  "name": "Ut n",
                  "isPublic": true,
                  "lastMessage": "ipsum non eu cillum",
                  "lastMessageUpdated": 8158171,
                  "created": -74595469,
                  "modified": -54787583,
                  "notificationTopicId": "sunt"
                },
                {
                  "roomId": "a",
                  "userId": "culpa non anim",
                  "name": "ame",
                  "isPublic": true,
                  "lastMessage": "minim",
                  "lastMessageUpdated": -4768829,
                  "created": 71917235,
                  "modified": 31564096
                },
                {
                  "roomId": "pariatur",
                  "userId": "Lorem pariatur voluptate",
                  "name": "ullamco",
                  "isPublic": true,
                  "lastMessage": "consectetur esse ut",
                  "lastMessageUpdated": -98943843,
                  "created": 65108906,
                  "modified": 61673903,
                  "informationUrl": "veniam culpa ipsum",
                  "notificationTopicId": "deserunt sed ad et",
                  "pictureUrl": "do tempor"
                }
              ],
              "devices": [
                {
                  "userId": "eu aliqua",
                  "platform": -91860152,
                  "token": "dolor quis in",
                  "notificationDeviceId": "commodo consectetur sed proident incididunt"
                },
                {
                  "userId": "reprehenderit dolore elit laborum in",
                  "platform": 14301208,
                  "token": "irure",
                  "notificationDeviceId": "exercitation Excepteur irure ut magna"
                },
                {
                  "userId": "minim",
                  "platform": -8861823,
                  "token": "ex cillum",
                  "notificationDeviceId": "anim ipsum sint laboris magna"
                }
              ],
              "informationUrl": "nostrud cupidatat"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "name",
                "pictureUrl",
                "unreadCount",
                "metaData",
                "created",
                "modified",
                "rooms",
                "devices"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "custom-user-id-0001"
                },
                "name": {
                  "type": "string",
                  "example": "custom user 0001"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "rooms": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "roomId",
                      "userId",
                      "name",
                      "metaData",
                      "isPublic",
                      "lastMessage",
                      "lastMessageUpdated",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "roomId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "name": {
                        "type": "string",
                        "example": "rick"
                      },
                      "pictureUrl": {
                        "type": "string",
                        "example": "http://example.com/img/rick.png"
                      },
                      "informationUrl": {
                        "type": "string",
                        "example": "http://example.com/user/rick"
                      },
                      "metaData": {
                        "type": "object",
                        "example": {
                          "key": "value"
                        }
                      },
                      "isPublic": {
                        "type": "boolean",
                        "example": true
                      },
                      "lastMessage": {
                        "type": "string",
                        "example": "Hello, World"
                      },
                      "lastMessageUpdated": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "notificationTopicId": {
                        "type": "string",
                        "example": "abcdefghijklmnopqrstuvwz"
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                },
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "userId",
                      "platform",
                      "token",
                      "notificationDeviceId"
                    ],
                    "properties": {
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "platform": {
                        "type": "integer",
                        "example": 1
                      },
                      "token": {
                        "type": "string",
                        "example": "abcdefghijelmnopqrstuvwxyz"
                      },
                      "notificationDeviceId": {
                        "type": "string",
                        "example": "abcdefghijelmnopqrstuvwxyz"
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "dolore non esse nisi enim",
              "status": 68700760,
              "errorName": "dolor quis consectetur deserunt exercitation",
              "detail": "consectetur velit consequat nisi"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Update user item. [PUT]

+ Parameters

    + userId: custom-user-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "pictureUrl": "adipisicing officia"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {
              "userId": "deserunt magna in veniam",
              "name": "veniam ipsum voluptate elit",
              "pictureUrl": "id",
              "unreadCount": 18212188,
              "created": -84874925,
              "modified": 51159796,
              "informationUrl": "Excepteur"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "name",
                "pictureUrl",
                "unreadCount",
                "metaData",
                "created",
                "modified"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "custom-user-id-0001"
                },
                "name": {
                  "type": "string",
                  "example": "custom user 0001"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "elit do Lorem",
              "status": -58779259,
              "errorName": "in amet ad elit esse"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "unreadCount": -7628453,
              "pictureUrl": "occaecat nisi ut"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "consequat nisi Duis laboris ad",
              "status": -5823985,
              "errorName": "aliqua pa",
              "detail": "veniam ipsum nostrud"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Delete user item. [DELETE]

+ Parameters

    + userId: custom-user-id-0001 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 204 (application/json)

    No Content

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "consequa",
              "status": 59012224,
              "errorName": "cillum Ut",
              "detail": "quis cillum velit dolor do"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/users/{userId}/devices/{platform}

#### Create device item. [POST]

+ Parameters

    + userId: custom-user-id-0001 (required)
    
    + platform: 1 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "et id Ut ea"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
              "userId": "non sint velit",
              "platform": -70680905,
              "token": "magna et reprehenderit quis",
              "notificationDeviceId": "veniam et tempor velit"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "platform",
                "token",
                "notificationDeviceId"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "platform": {
                  "type": "integer",
                  "example": 1
                },
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                },
                "notificationDeviceId": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "elit consectetur mollit"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "sed tempor",
              "status": 72027264,
              "errorName": "culpa ipsum",
              "invalidParams": [
                {
                  "reason": "in",
                  "name": "velit anim"
                },
                {
                  "name": "amet aliqua pariatur quis in",
                  "reason": "laboris reprehenderit in pariatur sint"
                },
                {
                  "name": "adipisici",
                  "reason": "eiusmod in aliqua ut"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "U"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 404 (application/json)

    Not Found.

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "aute"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "consequat officia",
              "status": 98227919,
              "errorName": "do non sit dolor ut",
              "detail": "anim adipisicing"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Get device item. [GET]

+ Parameters

    + userId: custom-user-id-0001 (required)
    
    + platform: 1 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "userId": "ipsum reprehenderit Lorem irure quis",
              "platform": 63394564,
              "token": "nisi",
              "notificationDeviceId": "ut ullamco in"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "platform",
                "token",
                "notificationDeviceId"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "platform": {
                  "type": "integer",
                  "example": 1
                },
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                },
                "notificationDeviceId": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "officia cillum irure",
              "status": -32547709,
              "errorName": "nulla aliqua",
              "detail": "culpa cupidatat labore"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Update device item. [PUT]

+ Parameters

    + userId: custom-user-id-0001 (required)
    
    + platform: 1 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "dolor anim ullamco velit"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {
              "userId": "aute nisi sed consectetur incididunt",
              "platform": 22900622,
              "token": "cillum eiusmod",
              "notificationDeviceId": "labore dolore consectetur"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "platform",
                "token",
                "notificationDeviceId"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "platform": {
                  "type": "integer",
                  "example": 1
                },
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                },
                "notificationDeviceId": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "amet enim officia non nisi"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "non occaecat aliquip",
              "status": 11706541,
              "errorName": "est pariatur Lorem non incididunt",
              "invalidParams": [
                {
                  "name": "dolore non cillum dolor si"
                },
                {
                  "reason": "deserunt eu aute in quis"
                },
                {
                  "reason": "sunt veniam"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "amet incididunt minim Duis id"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "token": "cillum laborum"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "example": "abcdefghijelmnopqrstuvwxyz"
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "ut magna laborum ad",
              "status": 78878124,
              "errorName": "aliquip dolor",
              "detail": "eiusmod Lorem sed dolor ipsum"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Delete device item. [DELETE]

+ Parameters

    + userId: custom-user-id-0001 (required)
    
    + platform: 1 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 204 (application/json)

    No Content

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "laborum",
              "status": 48299706,
              "errorName": "nulla quis esse consectet",
              "detail": "reprehenderit ad et Excepteur"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/users/{userId}/devices

#### Get device list. [GET]

+ Parameters

    + userId: custom-user-id-0001 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "devices": [
                {
                  "userId": "sunt magna",
                  "platform": -32379188,
                  "token": "qui voluptate est",
                  "notificationDeviceId": "laborum incididunt dolor"
                },
                {
                  "userId": "velit",
                  "platform": 21702719,
                  "token": "ut",
                  "notificationDeviceId": "ea quis consequa"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "devices"
              ],
              "properties": {
                "devices": {
                  "items": {
                    "type": "object",
                    "required": [
                      "userId",
                      "platform",
                      "token",
                      "notificationDeviceId"
                    ],
                    "properties": {
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "platform": {
                        "type": "integer",
                        "example": 1
                      },
                      "token": {
                        "type": "string",
                        "example": "abcdefghijelmnopqrstuvwxyz"
                      },
                      "notificationDeviceId": {
                        "type": "string",
                        "example": "abcdefghijelmnopqrstuvwxyz"
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "in sint laborum voluptate",
              "status": -76211191,
              "errorName": "amet voluptate",
              "detail": "non"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/rooms

#### Create room item. [POST]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userId": "magna reprehenderit ut est nisi",
              "name": "ad dolore ipsum et dolor",
              "informationUrl": "sed"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "name"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
              "roomId": "veniam",
              "userId": "Duis nulla sunt",
              "name": "eu",
              "isPublic": true,
              "lastMessage": "dolore fugiat qui consectetur veniam",
              "lastMessageUpdated": 57870334,
              "created": -35284587,
              "modified": 62618352
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "name",
                "metaData",
                "isPublic",
                "lastMessage",
                "lastMessageUpdated",
                "created",
                "modified"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                },
                "lastMessage": {
                  "type": "string",
                  "example": "Hello, World"
                },
                "lastMessageUpdated": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "notificationTopicId": {
                  "type": "string",
                  "example": "abcdefghijklmnopqrstuvwz"
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userId": "mollit",
              "name": "quis velit",
              "pictureUrl": "cupidatat laboris sint",
              "informationUrl": "ut",
              "isPublic": true
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "name"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "amet rep",
              "status": 16251176,
              "errorName": "anim velit dolore"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userId": "minim",
              "name": "incididunt",
              "informationUrl": "non minim in",
              "isPublic": true
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userId",
                "name"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "tempor",
              "status": 39210834,
              "errorName": "nulla",
              "detail": "consectetur in Duis"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Get room list. [GET]

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "rooms": [
                {
                  "roomId": "cillum ullamco veniam",
                  "userId": "qui",
                  "name": "amet Duis sed",
                  "isPublic": true,
                  "lastMessage": "in qui",
                  "lastMessageUpdated": 965062,
                  "created": -51249252,
                  "modified": -87619928,
                  "pictureUrl": "laborum",
                  "notificationTopicId": "veniam amet"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "rooms"
              ],
              "properties": {
                "rooms": {
                  "items": {
                    "type": "object",
                    "required": [
                      "roomId",
                      "userId",
                      "name",
                      "metaData",
                      "isPublic",
                      "lastMessage",
                      "lastMessageUpdated",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "roomId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "name": {
                        "type": "string",
                        "example": "rick"
                      },
                      "pictureUrl": {
                        "type": "string",
                        "example": "http://example.com/img/rick.png"
                      },
                      "informationUrl": {
                        "type": "string",
                        "example": "http://example.com/user/rick"
                      },
                      "metaData": {
                        "type": "object",
                        "example": {
                          "key": "value"
                        }
                      },
                      "isPublic": {
                        "type": "boolean",
                        "example": true
                      },
                      "lastMessage": {
                        "type": "string",
                        "example": "Hello, World"
                      },
                      "lastMessageUpdated": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "notificationTopicId": {
                        "type": "string",
                        "example": "abcdefghijklmnopqrstuvwz"
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "cillum consectetur dolore nostrud et",
              "status": 21282112,
              "errorName": "exercitation aliquip incididunt velit",
              "detail": "pariatur"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/rooms/{roomId}

#### Get room item. [GET]

+ Parameters

    + roomId: custom-room-id-0001 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "roomId": "esse",
              "userId": "cu",
              "name": "amet adipisicing consequat",
              "isPublic": false,
              "lastMessage": "est reprehenderit ad nisi",
              "lastMessageUpdated": -7627409,
              "created": -25772649,
              "modified": 31998721
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "name",
                "metaData",
                "isPublic",
                "lastMessage",
                "lastMessageUpdated",
                "created",
                "modified"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                },
                "lastMessage": {
                  "type": "string",
                  "example": "Hello, World"
                },
                "lastMessageUpdated": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "notificationTopicId": {
                  "type": "string",
                  "example": "abcdefghijklmnopqrstuvwz"
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "aliquip",
              "status": -74746536,
              "errorName": "occaecat",
              "detail": "elit proident consectetur ut id"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Update room item. [PUT]

+ Parameters

    + roomId: custom-room-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "name": "Duis",
              "pictureUrl": "in ad commodo nulla",
              "isPublic": false,
              "informationUrl": "occaecat ut"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {
              "roomId": "tempor sed quis sunt",
              "userId": "quis",
              "name": "aliqua mollit proident cupidatat cillum",
              "isPublic": false,
              "lastMessage": "ex dolore aliqua consequat id",
              "lastMessageUpdated": 96452735,
              "created": 68365509,
              "modified": -6355347,
              "pictureUrl": "fugiat",
              "informationUrl": "est",
              "notificationTopicId": "consectetur enim non sint"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "name",
                "metaData",
                "isPublic",
                "lastMessage",
                "lastMessageUpdated",
                "created",
                "modified"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                },
                "lastMessage": {
                  "type": "string",
                  "example": "Hello, World"
                },
                "lastMessageUpdated": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "notificationTopicId": {
                  "type": "string",
                  "example": "abcdefghijklmnopqrstuvwz"
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "exercitation dolor ut cupidatat",
              "status": 80699653,
              "errorName": "Ut"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "pictureUrl": "dolore proident magna non dolore"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick's room"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick-room.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/room/rick"
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "isPublic": {
                  "type": "boolean",
                  "example": true
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "id ea ad in est",
              "status": -3808329,
              "errorName": "exercitation ut eiusmod ullamco incididunt",
              "detail": "enim"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Delete room item. [DELETE]

+ Parameters

    + roomId: custom-room-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 204 (application/json)

    No Content

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "anim",
              "status": -78464036,
              "errorName": "in irure qui dolore"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "anim",
              "status": 86779708,
              "errorName": "in aliquip id ad ea",
              "detail": "exercitation officia"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Get room's message list [GET /v0/rooms/{roomId}/messages]

+ Parameters

    + roomId: custom-room-id-0001 (required)
    
    + limit: 10
    
    + offset

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "messages": [
                {
                  "messageId": "in do sed velit et",
                  "roomId": "enim dolore ex",
                  "userId": "nostrud ut et Excepteur",
                  "type": "nostrud adipisicing consectetur",
                  "created": 71654535,
                  "modified": 23849124,
                  "id": -98766817
                },
                {
                  "messageId": "ut",
                  "roomId": "in dolore labore eu laboris",
                  "userId": "id Lorem sit",
                  "type": "in et",
                  "created": -92044791,
                  "modified": -29554851,
                  "id": 73490228
                },
                {
                  "messageId": "consectetur ipsum in deserunt ad",
                  "roomId": "laborum",
                  "userId": "in",
                  "type": "aute amet",
                  "created": 47704195,
                  "modified": 48597911,
                  "id": 44166400
                },
                {
                  "messageId": "id aliqua pr",
                  "roomId": "nisi anim",
                  "userId": "culpa est fugiat",
                  "type": "laborum proident",
                  "created": 66520280,
                  "modified": 38665953,
                  "id": -10310867
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "messages": {
                  "items": {
                    "type": "object",
                    "required": [
                      "messageId",
                      "roomId",
                      "userId",
                      "type",
                      "payload",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 1
                      },
                      "messageId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "roomId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "type": {
                        "type": "string",
                        "example": "text"
                      },
                      "payload": {
                        "type": "object",
                        "example": {
                          "text": "Hello, world."
                        }
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "eiusmod consequat",
              "status": 61138916,
              "errorName": "dolore nisi",
              "invalidParams": [
                {
                  "name": "id est",
                  "reason": "ut irure in"
                },
                {
                  "name": "fugiat esse mollit elit magna",
                  "reason": "o"
                },
                {
                  "name": "commodo incididunt dolore fugiat"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "ad aute exercitation elit ullamco",
              "status": -57302379,
              "errorName": "et qui qu",
              "detail": "eiusmod esse occaecat elit commodo"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/rooms/{roomId}/users

#### Create room's user item. [POST]

+ Parameters

    + roomId: custom-room-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userIds": [
                "sed fugiat sunt anim in",
                "ea aliqua"
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userIds"
              ],
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "d290f1ee-6c54-4b01-90e6-d701748f0851, d290f1ee-6c54-4b01-90e6-d701748f0852"
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
              "roomUsers": [
                {
                  "roomId": "id ut laboris in",
                  "userId": "ad",
                  "unreadCount": 90847909,
                  "created": -6961396,
                  "modified": 28833354
                },
                {
                  "roomId": "ut",
                  "userId": "dolore ipsum in officia eu",
                  "unreadCount": 95195256,
                  "created": 88370704,
                  "modified": -45572325
                },
                {
                  "roomId": "sit",
                  "userId": "Duis Excepteur cup",
                  "unreadCount": -58075521,
                  "created": -90145566,
                  "modified": 35790506
                },
                {
                  "roomId": "dolore",
                  "userId": "et nostrud",
                  "unreadCount": -25122543,
                  "created": 69817202,
                  "modified": 33837689
                },
                {
                  "roomId": "eu",
                  "userId": "",
                  "unreadCount": 17315156,
                  "created": -12289413,
                  "modified": 41205891
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomUsers"
              ],
              "properties": {
                "roomUsers": {
                  "items": {
                    "type": "object",
                    "required": [
                      "roomId",
                      "userId",
                      "unreadCount",
                      "metaData",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "roomId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "unreadCount": {
                        "type": "integer",
                        "example": 1
                      },
                      "metaData": {
                        "type": "object",
                        "example": {
                          "key": "value"
                        }
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userIds": [
                "amet Duis",
                "minim in aliqua ut",
                "est",
                "cillum irure sit fugiat",
                "ipsum aliqua dolore in commodo"
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userIds"
              ],
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "d290f1ee-6c54-4b01-90e6-d701748f0851, d290f1ee-6c54-4b01-90e6-d701748f0852"
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "ut in aute ea",
              "status": -43401181,
              "errorName": "non dolor nostrud esse deserunt",
              "invalidParams": [
                {
                  "name": "Lorem non",
                  "reason": "irure exercitation aliquip fugiat proident"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userIds": [
                "id enim et fugiat",
                "nostrud"
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userIds"
              ],
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "d290f1ee-6c54-4b01-90e6-d701748f0851, d290f1ee-6c54-4b01-90e6-d701748f0852"
                  }
                }
              }
            }

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "userIds": [
                "ipsum aliquip mag"
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "userIds"
              ],
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "d290f1ee-6c54-4b01-90e6-d701748f0851, d290f1ee-6c54-4b01-90e6-d701748f0852"
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "nostrud dolore esse officia non",
              "status": -66959391,
              "errorName": "Lorem exercitation eiusmod deserunt",
              "detail": "Lorem ad anim occaecat et"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Update room's user item. [PUT]

+ Parameters

    + roomId: custom-room-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {
              "roomUsers": [
                {
                  "roomId": "ad veniam proident exercitation",
                  "userId": "consectetur",
                  "unreadCount": 77094030,
                  "created": -24259464,
                  "modified": 55800865
                },
                {
                  "roomId": "anim velit irure commodo",
                  "userId": "cillum aliqua consect",
                  "unreadCount": -93073290,
                  "created": -38933013,
                  "modified": -81663194
                },
                {
                  "roomId": "non tempor officia",
                  "userId": "ea in",
                  "unreadCount": 14237489,
                  "created": -59032411,
                  "modified": -96139416
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomUsers"
              ],
              "properties": {
                "roomUsers": {
                  "items": {
                    "type": "object",
                    "required": [
                      "roomId",
                      "userId",
                      "unreadCount",
                      "metaData",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "roomId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "unreadCount": {
                        "type": "integer",
                        "example": 1
                      },
                      "metaData": {
                        "type": "object",
                        "example": {
                          "key": "value"
                        }
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "unreadCount": 24530695
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "dolor minim",
              "status": 81235328,
              "errorName": "aute cillum nulla dol",
              "invalidParams": [
                {
                  "reason": "ea sit deserunt fugiat enim",
                  "name": "qui cillum"
                },
                {
                  "name": "eu",
                  "reason": "mollit"
                },
                {
                  "name": "sed",
                  "reason": "ipsum proident veniam Ut"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "unreadCount": -93701941
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "veniam elit",
              "status": 68606498,
              "errorName": "velit ad",
              "detail": "pariatur voluptate"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Delete room's user item. [DELETE]

+ Parameters

    + roomId: custom-room-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "roomUsers": [
                {
                  "roomId": "voluptate et in",
                  "userId": "Ut occaecat minim incididunt",
                  "unreadCount": 93031930,
                  "created": 94999281,
                  "modified": -63459913
                },
                {
                  "roomId": "Ut labore",
                  "userId": "culpa in incididunt et nulla",
                  "unreadCount": -77759355,
                  "created": -73134579,
                  "modified": 91157165
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomUsers"
              ],
              "properties": {
                "roomUsers": {
                  "items": {
                    "type": "object",
                    "required": [
                      "roomId",
                      "userId",
                      "unreadCount",
                      "metaData",
                      "created",
                      "modified"
                    ],
                    "properties": {
                      "roomId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "userId": {
                        "type": "string",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                      },
                      "unreadCount": {
                        "type": "integer",
                        "example": 1
                      },
                      "metaData": {
                        "type": "object",
                        "example": {
                          "key": "value"
                        }
                      },
                      "created": {
                        "type": "integer",
                        "example": 1488294000000000000
                      },
                      "modified": {
                        "type": "integer",
                        "example": 1488294000000000000
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "sed deserunt",
              "status": -83186658,
              "errorName": "non aute ad id qui"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "sed voluptate",
              "status": -38558359,
              "errorName": "non amet nostrud",
              "detail": "Duis"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/rooms/{roomId}/users/{userId}

#### Update room's user item. [PUT]

+ Parameters

    + roomId: custom-room-id-0001 (required)
    
    + userId: custom-user-id-0001 (required)

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "unreadCount": 10606008
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 200 (application/json)

    OK

    + Body

            {
              "roomId": "dolor aliqua dolor nulla tempor",
              "userId": "nostrud",
              "unreadCount": -69304564,
              "created": -23917877,
              "modified": 44272017
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "unreadCount",
                "metaData",
                "created",
                "modified"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "sit labore laborum non",
              "status": 14687918,
              "errorName": "aliquip",
              "invalidParams": [
                {
                  "name": "id consectetur dolore proident labore",
                  "reason": ""
                },
                {
                  "name": "e"
                },
                {
                  "name": "dolor occaecat do",
                  "reason": "ipsum"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "unreadCount": 37406948
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 404 (application/json)

    Not Found

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {}

    + Schema

            {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "example": 1
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "pariatur magna amet et",
              "status": 3092359,
              "errorName": "enim",
              "detail": "sit occaecat cillum Duis"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/messages

#### Create message item. [POST]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "roomId": "consequat",
              "userId": "deserunt et qui Duis",
              "type": "non voluptate proident eiusmod sunt"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "type",
                "payload"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "type": {
                  "type": "string",
                  "example": "text"
                },
                "payload": {
                  "type": "object",
                  "example": {
                    "text": "Hello, world."
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "roomId": "qui",
              "userId": "commodo",
              "type": "nulla nisi officia elit"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "type",
                "payload"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "type": {
                  "type": "string",
                  "example": "text"
                },
                "payload": {
                  "type": "object",
                  "example": {
                    "text": "Hello, world."
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "Request parameter error. (Create user item)",
              "status": 400,
              "errorName": "invalid-param",
              "invalidParams": [
                {
                  "name": "name",
                  "reason": "name is required, but it's empty."
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
              "roomId": "est",
              "userId": "aliquip officia dolore irure in",
              "type": "ex eiusmod labore irure "
            }

    + Schema

            {
              "type": "object",
              "required": [
                "roomId",
                "userId",
                "type",
                "payload"
              ],
              "properties": {
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "type": {
                  "type": "string",
                  "example": "text"
                },
                "payload": {
                  "type": "object",
                  "example": {
                    "text": "Hello, world."
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "An error occurred while creating user item.",
              "status": 500,
              "detail": "UNIQUE constraint failed: user.user_id",
              "errorName": "database-error"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/messages/{messageId}

#### Get message item. [GET]

+ Parameters

    + messageId: custom-message-id-0001 (required)

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    OK

    + Body

            {
              "messageId": "ex dolor cillum",
              "roomId": "sit sed elit",
              "userId": "ut",
              "type": "Duis dolor",
              "created": -34310475,
              "modified": 33784626
            }

    + Schema

            {
              "type": "object",
              "required": [
                "messageId",
                "roomId",
                "userId",
                "type",
                "payload",
                "created",
                "modified"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "messageId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "roomId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "type": {
                  "type": "string",
                  "example": "text"
                },
                "payload": {
                  "type": "object",
                  "example": {
                    "text": "Hello, world."
                  }
                },
                "created": {
                  "type": "integer",
                  "example": 1488294000000000000
                },
                "modified": {
                  "type": "integer",
                  "example": 1488294000000000000
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "Request parameter error. (Create user item)",
              "status": 400,
              "errorName": "invalid-param",
              "invalidParams": [
                {
                  "name": "name",
                  "reason": "name is required, but it's empty."
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "An error occurred while creating user item.",
              "status": 500,
              "detail": "UNIQUE constraint failed: user.user_id",
              "errorName": "database-error"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

### /v0/assets

#### Create asset item. [POST]

+ Request

    + Headers

            Accept: application/json

    + Body

    + Schema

            {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
              "assetId": "exercitation",
              "sourceUrl": "officia ut exercitation aliquip",
              "mime": "aliqua sint in consequat"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "assetId",
                "sourceUrl",
                "mime"
              ],
              "properties": {
                "assetId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "sourceUrl": {
                  "type": "string",
                  "example": "http://example.com/img/asset.png"
                },
                "mime": {
                  "type": "string",
                  "example": "image/png"
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

    + Schema

            {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 400 (application/json)

    Bad Request

    + Body

            {
              "title": "minim ullamco tempor",
              "status": -72083708,
              "errorName": "tempor velit",
              "invalidParams": [
                {
                  "reason": "cillum et magna",
                  "name": "labore esse sit irure commodo"
                },
                {
                  "reason": "tempor",
                  "name": "quis"
                },
                {
                  "name": "dolor qui",
                  "reason": "in"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Request parameter error. (Create room item)."
                },
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "errorName": {
                  "type": "string",
                  "example": "invalid-json"
                },
                "invalidParams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "name"
                      },
                      "reason": {
                        "type": "string",
                        "example": "name is required, but it's empty."
                      }
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Body

    + Schema

            {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
                },
                "name": {
                  "type": "string",
                  "example": "rick"
                },
                "pictureUrl": {
                  "type": "string",
                  "example": "http://example.com/img/rick.png"
                },
                "informationUrl": {
                  "type": "string",
                  "example": "http://example.com/user/rick"
                },
                "unreadCount": {
                  "type": "integer",
                  "example": 0
                },
                "metaData": {
                  "type": "object",
                  "example": {
                    "key": "value"
                  }
                }
              }
            }

+ Response 500 (application/json)

    Internal Server Error

    + Body

            {
              "title": "elit ullamco velit reprehenderit",
              "status": -4630318,
              "errorName": "consectetur in commo",
              "detail": "cupidatat"
            }

    + Schema

            {
              "type": "object",
              "required": [
                "title",
                "status",
                "errorName",
                "detail"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Your request parameters didn't validate."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "errorName": {
                  "type": "string",
                  "example": "database-error"
                },
                "detail": {
                  "type": "string",
                  "example": "no rows in result set."
                }
              }
            }

#### Get asset item. [GET]

+ Response 200

    OK

    + Body

+ Response 404

    Not Found

    + Body

