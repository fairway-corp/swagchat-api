{
	"info": {
		"_postman_id": "f65ef6ac-371a-4f5c-b813-9bd3b78cb88b",
		"name": "Chat API E2E Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set environment variables",
			"description": "",
			"item": [
				{
					"name": "SET_ENVIRONMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4ae8606-1f7c-4f19-9756-7afff2b8c969",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"chat-api [API Version]0 [Build Version]0.9.1\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a3eb3591-f96e-4748-a735-c32a6bbd41a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Management users",
			"description": "",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd822aab-7966-4a4e-977a-e587bcffa0b2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"console.log(res);",
									"console.log(userSchema);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.name).to.eql(randomUserName);",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/picture.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/users\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"en\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.roles.length).to.eql(3);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{randomUserName}}\",\n\t\"pictureUrl\": \"http://example.com/img/picture.png\",\n\t\"informationUrl\": \"http://example.com/users\",\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"public\": true,\n\t\"canBlock\": true,\n\t\"lang\": \"en\",\n\t\"roleIds\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5d237f4-133e-4b49-8bc1-4a121e550cc0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"console.log(res);",
									"console.log(userSchema);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(randomUserName);",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(false);",
									"    pm.expect(res.canBlock).to.eql(false);",
									"    pm.expect(res.lang).to.eql(\"\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa883ed9-46f3-4033-8987-9d9082b109f2",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);",
									"",
									"var randomUserId = \"\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserId += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserId\", randomUserId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\":\"{{randomUserId}}\",\n\t\"name\":\"{{randomUserName}}\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14957a23-c31c-4b16-ada7-be7001a502e8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const usersSchemaString = pm.environment.get(\"usersSchema\");",
									"const usersSchema = JSON.parse(usersSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, usersSchema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/users?limit=10&offset=0&order=created+desc,modified+asc&userId=xxxxx",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "order",
									"value": "created+desc,modified+asc"
								},
								{
									"key": "userId",
									"value": "xxxxx"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53a8b3db-bcb6-412a-b0f1-633aa7a99690",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(randomUserName);",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(false);",
									"    pm.expect(res.canBlock).to.eql(false);",
									"    pm.expect(res.lang).to.eql(\"\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03916add-e182-4816-98a6-6f247beb82b8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"console.log(res);",
									"console.log(userSchema);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.name).to.eql(\"update\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/update.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/users/update\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"en\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"update\",\n\t\"pictureUrl\": \"http://example.com/img/update.png\",\n\t\"informationUrl\": \"http://example.com/users/update\",\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"public\": true,\n\t\"canBlock\": true,\n\t\"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{userId}/contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c10376f-ac92-4ef3-aa53-b60f1a4f4d51",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const usersSchemaString = pm.environment.get(\"usersSchema\");",
									"const usersSchema = JSON.parse(usersSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, usersSchema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/contacts",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/profiles/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a73835e3-3ae6-4b16-a25b-20bf36ea818f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"update\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/update.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/users/update\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"en\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/profiles/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"profiles",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Management rooms",
			"description": "",
			"item": [
				{
					"name": "/rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de1c9f34-9168-45cf-a642-76eac3984cdb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemeString = pm.environment.get(\"roomSchema\");",
									"const roomScheme = JSON.parse(roomSchemeString);",
									"console.log(res);",
									"console.log(roomScheme);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomScheme)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"room-name-0001\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/picture.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/rooms\");",
									"    pm.expect(res.type).to.eql(2);",
									"    pm.expect(res.canLeft).to.eql(true);",
									"    pm.expect(res.speechMode).to.eql(1);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"type1,type2\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.users.length).to.eql(1);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "079a7612-a4c6-498f-afdc-d15437dd1d78",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\":\"{{randomUserId}}\",\n\t\"name\":\"room-name-0001\",\n\t\"pictureUrl\":\"http://example.com/img/picture.png\",\n\t\"informationUrl\":\"http://example.com/rooms\",\n\t\"type\": 2,\n\t\"canLeft\": true,\n\t\"speechMode\": 1,\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"availableMessageTypes\": \"type1,type2\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07564b45-27af-4126-978a-e561bf742056",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemeString = pm.environment.get(\"roomSchema\");",
									"const roomScheme = JSON.parse(roomSchemeString);",
									"console.log(res);",
									"console.log(roomScheme);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomScheme)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"\");",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.type).to.eql(2);",
									"    pm.expect(res.canLeft).to.eql(true);",
									"    pm.expect(res.speechMode).to.eql(0);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.users.length).to.eql(1);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd6f068a-1d3d-4773-8c7f-151da5389e05",
								"type": "text/javascript",
								"exec": [
									"var randomRoomId = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomRoomId += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomRoomId\", randomRoomId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roomId\":\"{{randomRoomId}}\",\n\t\"userId\":\"{{randomUserId}}\",\n\t\"type\": 2\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a56df56-4752-4735-bb37-c21fc6a09176",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomsSchemaString = pm.environment.get(\"roomsSchema\");",
									"const roomsSchema = JSON.parse(roomsSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomsSchema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/rooms?limit=10&offset=0&order=created+desc,modified+asc&userId=xxxxx",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "order",
									"value": "created+desc,modified+asc"
								},
								{
									"key": "userId",
									"value": "xxxxx"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/rooms/{roomId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5a4c5c0-2263-4c77-8c44-2971da28dc25",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemaString = pm.environment.get(\"roomSchema\");",
									"const roomSchema = JSON.parse(roomSchemaString);",
									"console.log(roomSchema);",
									"console.log(res);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomSchema)).to.be.true;",
									"});",
									"",
									"const randomRoomId = pm.environment.get(\"randomRoomId\");",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.roomId).to.eql(randomRoomId);",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"\");",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.type).to.eql(2);",
									"    pm.expect(res.canLeft).to.eql(true);",
									"    pm.expect(res.speechMode).to.eql(0);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.users.length).to.eql(1);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "X-Sub",
								"value": "{{randomUserId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rooms{roomId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac35d262-1628-4ef0-acf2-871c1717fbf1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemaString = pm.environment.get(\"roomSchema\");",
									"const roomSchema = JSON.parse(roomSchemaString);",
									"console.log(roomSchema);",
									"console.log(res);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomSchema)).to.be.true;",
									"});",
									"",
									"const randomRoomId = pm.environment.get(\"randomRoomId\");",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.roomId).to.eql(randomRoomId);",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"update\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/picture.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/rooms\");",
									"    pm.expect(res.type).to.eql(3);",
									"    pm.expect(res.canLeft).to.eql(false);",
									"    pm.expect(res.speechMode).to.eql(1);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"type3\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"update\",\n\t\"pictureUrl\":\"http://example.com/img/picture.png\",\n\t\"informationUrl\":\"http://example.com/rooms\",\n\t\"type\": 3,\n\t\"canLeft\": false,\n\t\"speechMode\": 1,\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"availableMessageTypes\": \"type3\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete resources",
			"description": "",
			"item": [
				{
					"name": "/users/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "700d1832-d219-4115-88f3-0dcd440ad301",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.expect(responseBody).not.eql(null);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rooms{roomId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e49372c-7d0e-4851-88a5-a37040c69c71",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.expect(responseBody).not.eql(null);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete environment variables",
			"description": "",
			"item": [
				{
					"name": "DELETE_ENVIRONMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56a46721-3350-4a3f-b44d-0c996890f66c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"chat-api [API Version]0 [Build Version]0.9.1\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e48a8e7-99f2-438d-87c2-54c39ebc9b25",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"randomUserName\");",
									"pm.environment.unset(\"randomUserId\");",
									"pm.environment.unset(\"randomDeviceToken\");",
									"pm.environment.unset(\"addBlockUserIds\");",
									"pm.environment.unset(\"deleteBlockUserIds\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}