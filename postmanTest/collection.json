{
	"info": {
		"_postman_id": "f65ef6ac-371a-4f5c-b813-9bd3b78cb88b",
		"name": "Chat API Test",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "17a94f63-807c-4000-ab89-cc71d116e569",
			"name": "Set environment variables",
			"item": [
				{
					"_postman_id": "cd32ae54-81f8-4f4e-aa00-8fef11ab579b",
					"name": "SET_ENVIRONMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4ae8606-1f7c-4f19-9756-7afff2b8c969",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"chat-api [API Version]0 [Build Version]0.9.1\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a3eb3591-f96e-4748-a735-c32a6bbd41a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "d0322de0-7681-4d2c-be5f-daab21bff071",
			"name": "Management users",
			"item": [
				{
					"_postman_id": "63db3bd3-5b98-4ae2-ac89-781e75f5ad05",
					"name": "/users - 0001",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5808dc05-c796-4830-a5a5-5c38ea4b5fb3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.name).to.eql(randomUserName);",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/picture.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/users\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"en\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.roles.length).to.eql(3);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{randomUserName}}\",\n\t\"pictureUrl\": \"http://example.com/img/picture.png\",\n\t\"informationUrl\": \"http://example.com/users\",\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"public\": true,\n\t\"canBlock\": true,\n\t\"lang\": \"en\",\n\t\"roles\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7843f4f4-6a02-4247-b2c8-a9e0faa39b90",
					"name": "/users - 0002",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55ad700d-1e6e-4aa7-9014-222add822779",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"console.log(res);",
									"console.log(userSchema);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(randomUserName);",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa883ed9-46f3-4033-8987-9d9082b109f2",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);",
									"",
									"var randomUserId = \"\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserId += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserId\", randomUserId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\":\"{{randomUserId}}\",\n\t\"name\":\"{{randomUserName}}\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "2d153514-1847-4440-9ab5-247bba4d636b",
					"name": "/users - 0003",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a44b5f18-1694-4a9a-a791-25834e6d42f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"console.log(res);",
									"console.log(userSchema);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId2 = pm.environment.get(\"randomUserId2\");",
									"const randomUserName2 = pm.environment.get(\"randomUserName2\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId2);",
									"    pm.expect(res.name).to.eql(randomUserName2);",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7534b8c1-0433-46df-aa67-03f8b7a6b69a",
								"type": "text/javascript",
								"exec": [
									"var randomUserName2 = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName2 += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName2\", randomUserName2);",
									"",
									"var randomUserId2 = \"\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserId2 += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserId2\", randomUserId2);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\":\"{{randomUserId2}}\",\n\t\"name\":\"{{randomUserName2}}\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "13bcd6b3-57b7-4e5b-b05d-bfe2d6711f11",
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14957a23-c31c-4b16-ada7-be7001a502e8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const usersSchemaString = pm.environment.get(\"usersSchema\");",
									"const usersSchema = JSON.parse(usersSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, usersSchema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/users?limit=10&offset=0&order=created+desc,modified+asc&userId=xxxxx",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "order",
									"value": "created+desc,modified+asc"
								},
								{
									"key": "userId",
									"value": "xxxxx"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c4ba485b-ebf2-41c3-9adf-18680ac56a19",
					"name": "/users/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0706eb79-3241-4605-a23d-92a22a1d7b17",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(randomUserName);",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(true);",
									"    pm.expect(res.canBlock).to.eql(true);",
									"    pm.expect(res.lang).to.eql(\"\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7ebe96eb-a7a0-4d66-baaf-2e1d0af9ea43",
					"name": "/users/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b5d790f-9b29-4eb1-b84e-6e746d785c5e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"console.log(res);",
									"console.log(userSchema);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.name).to.eql(\"update\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/update.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/users/update\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(false);",
									"    pm.expect(res.canBlock).to.eql(false);",
									"    pm.expect(res.lang).to.eql(\"en\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"update\",\n\t\"pictureUrl\": \"http://example.com/img/update.png\",\n\t\"informationUrl\": \"http://example.com/users/update\",\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"public\": false,\n\t\"canBlock\": false,\n\t\"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "337d0b07-2283-4b21-a967-7ad33e5bbbc4",
					"name": "/users/{userId}/contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c10376f-ac92-4ef3-aa53-b60f1a4f4d51",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const usersSchemaString = pm.environment.get(\"usersSchema\");",
									"const usersSchema = JSON.parse(usersSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, usersSchema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/contacts",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "620d0f92-a9f4-4aed-a779-f7dbc92a5e4f",
					"name": "/profiles/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b11934fd-3653-45b8-a320-ce6cf1007a81",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const userSchemaString = pm.environment.get(\"userSchema\");",
									"const userSchema = JSON.parse(userSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, userSchema)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"const randomUserName = pm.environment.get(\"randomUserName\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"update\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/update.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/users/update\");",
									"    pm.expect(res.unreadCount).to.eql(0);",
									"    pm.expect(res.public).to.eql(false);",
									"    pm.expect(res.canBlock).to.eql(false);",
									"    pm.expect(res.lang).to.eql(\"en\");",
									"    pm.expect(res.lastAccessRoomId).to.eql(\"\");",
									"    pm.expect(new Date(res.lastAccessed)).not.eql(null);",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/profiles/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"profiles",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "8effcc86-4552-4b5f-8f82-e8fb8d91c64a",
					"name": "/users/{userId}/blockUsers",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"blockUserIds\": [\"{{randomUserId2}}\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/blockUsers",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"blockUsers"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7d529d91-0750-4051-beff-fe0d8037b81e",
					"name": "/users/{userId}/blockUsers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userIds\": [\"73217b00-eb91-4a7f-ba51-532e4f98ed55\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/blockUsers",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"blockUsers"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0fcf1c51-b5fb-4baf-a831-2b6636af4fd2",
					"name": "/users/{userId}/blockedUsers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userIds\": [\"73217b00-eb91-4a7f-ba51-532e4f98ed55\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/blockedUsers",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"blockedUsers"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "902605d7-b257-43ec-855f-81174ffcb61e",
					"name": "/users/{userId}/blockUsers",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"blockUserIds\": [\"{{randomUserId2}}\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/blockUsers",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"blockUsers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "baadf421-834f-4ea0-887c-f98a1c13f7c3",
			"name": "Management user roles",
			"item": [
				{
					"_postman_id": "1eb544f8-3ffd-422a-bca6-b9950ca351be",
					"name": "/users/{userId}/roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66bac457-86dd-4774-a74b-14b3313bb44d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roles\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/roles",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "4543fca1-2580-4c26-bf0a-b900cb42a37d",
					"name": "/roles/{roleId}/users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/roles/3/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"roles",
								"3",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "deba4b16-6713-46af-ac71-3e24453475fa",
					"name": "/users/{userId}/roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66bac457-86dd-4774-a74b-14b3313bb44d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roles\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}/roles",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}",
								"roles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "fb8f808d-d57e-4026-8d7e-1cc362b5175b",
			"name": "Management rooms",
			"item": [
				{
					"_postman_id": "1223023d-80b4-46ed-ab87-eec70b0ce450",
					"name": "/rooms - 0001",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de1c9f34-9168-45cf-a642-76eac3984cdb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemeString = pm.environment.get(\"roomSchema\");",
									"const roomScheme = JSON.parse(roomSchemeString);",
									"console.log(res);",
									"console.log(roomScheme);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomScheme)).to.be.true;",
									"});",
									"",
									"const randomUserId = pm.environment.get(\"randomUserId\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId);",
									"    pm.expect(res.name).to.eql(\"room-name-0001\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/picture.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/rooms\");",
									"    pm.expect(res.type).to.eql(2);",
									"    pm.expect(res.canLeft).to.eql(true);",
									"    pm.expect(res.speechMode).to.eql(1);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"type1,type2\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.users.length).to.eql(1);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "079a7612-a4c6-498f-afdc-d15437dd1d78",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\":\"{{randomUserId}}\",\n\t\"name\":\"room-name-0001\",\n\t\"pictureUrl\":\"http://example.com/img/picture.png\",\n\t\"informationUrl\":\"http://example.com/rooms\",\n\t\"type\": 2,\n\t\"canLeft\": true,\n\t\"speechMode\": 1,\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"availableMessageTypes\": \"type1,type2\",\n\t\"userIds\": [\"{{randomUserId2}}\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "a91046bb-669e-410b-8696-fc23ac2665ba",
					"name": "/rooms - 0002",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32bcf732-e68b-4813-858f-8ca935e3bc0a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemeString = pm.environment.get(\"roomSchema\");",
									"const roomScheme = JSON.parse(roomSchemeString);",
									"console.log(res);",
									"console.log(roomScheme);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomScheme)).to.be.true;",
									"});",
									"",
									"const randomUserId2 = pm.environment.get(\"randomUserId2\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.userId).to.eql(randomUserId2);",
									"    pm.expect(res.name).to.eql(\"\");",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.type).to.eql(2);",
									"    pm.expect(res.canLeft).to.eql(true);",
									"    pm.expect(res.speechMode).to.eql(0);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.users.length).to.eql(1);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd6f068a-1d3d-4773-8c7f-151da5389e05",
								"type": "text/javascript",
								"exec": [
									"var randomRoomId = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomRoomId += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomRoomId\", randomRoomId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roomId\":\"{{randomRoomId}}\",\n\t\"userId\":\"{{randomUserId2}}\",\n\t\"type\": 2\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "694c844f-82a0-46a2-a7fd-6c1d520ba4d9",
					"name": "/rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a56df56-4752-4735-bb37-c21fc6a09176",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomsSchemaString = pm.environment.get(\"roomsSchema\");",
									"const roomsSchema = JSON.parse(roomsSchemaString);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomsSchema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/rooms?limit=10&offset=0&order=created+desc,modified+asc&userId=xxxxx",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "order",
									"value": "created+desc,modified+asc"
								},
								{
									"key": "userId",
									"value": "xxxxx"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "42f8b863-805f-4079-8e1f-9972f0fc384a",
					"name": "/rooms/{roomId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d843cfa1-3afe-4536-9de9-56962596eb8e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemaString = pm.environment.get(\"roomSchema\");",
									"const roomSchema = JSON.parse(roomSchemaString);",
									"console.log(roomSchema);",
									"console.log(res);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomSchema)).to.be.true;",
									"});",
									"",
									"const randomRoomId = pm.environment.get(\"randomRoomId\");",
									"const randomUserId2 = pm.environment.get(\"randomUserId2\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.roomId).to.eql(randomRoomId);",
									"    pm.expect(res.userId).to.eql(randomUserId2);",
									"    pm.expect(res.name).to.eql(\"\");",
									"    pm.expect(res.pictureUrl).to.eql(\"\");",
									"    pm.expect(res.informationUrl).to.eql(\"\");",
									"    pm.expect(res.type).to.eql(2);",
									"    pm.expect(res.canLeft).to.eql(true);",
									"    pm.expect(res.speechMode).to.eql(0);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"    pm.expect(res.users.length).to.eql(1);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "X-Sub",
								"value": "{{randomUserId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d3539076-87d5-4ea0-86b8-e9554115c78e",
					"name": "/rooms{roomId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17bd4da2-0c59-4fb9-b404-cd07d635f0b9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"const roomSchemaString = pm.environment.get(\"roomSchema\");",
									"const roomSchema = JSON.parse(roomSchemaString);",
									"console.log(roomSchema);",
									"console.log(res);",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(res, roomSchema)).to.be.true;",
									"});",
									"",
									"const randomRoomId = pm.environment.get(\"randomRoomId\");",
									"const randomUserId2 = pm.environment.get(\"randomUserId2\");",
									"pm.test('Data is valid', function() {",
									"    pm.expect(res.roomId).to.eql(randomRoomId);",
									"    pm.expect(res.userId).to.eql(randomUserId2);",
									"    pm.expect(res.name).to.eql(\"update\");",
									"    pm.expect(res.pictureUrl).to.eql(\"http://example.com/img/picture.png\");",
									"    pm.expect(res.informationUrl).to.eql(\"http://example.com/rooms\");",
									"    pm.expect(res.type).to.eql(3);",
									"    pm.expect(res.canLeft).to.eql(false);",
									"    pm.expect(res.speechMode).to.eql(1);",
									"    pm.expect(res.availableMessageTypes).to.eql(\"type3\");",
									"    pm.expect(res.lastMessage).to.eql(\"\");",
									"    pm.expect(new Date(res.lastMessageUpdated)).not.eql(null);",
									"    pm.expect(res.messageCount).to.eql(0);",
									"    pm.expect(res.notificationTopicId).to.eql(\"\");",
									"    pm.expect(new Date(res.created)).not.eql(null);",
									"    pm.expect(new Date(res.modified)).not.eql(null);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"update\",\n\t\"pictureUrl\":\"http://example.com/img/picture.png\",\n\t\"informationUrl\":\"http://example.com/rooms\",\n\t\"type\": 3,\n\t\"canLeft\": false,\n\t\"speechMode\": 1,\n\t\"metaData\": {\n\t\t\"key1\": \"value1\"\n\t},\n\t\"availableMessageTypes\": \"type3\",\n\t\"userIds\": [\"{{randomUserId2}}\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "d84aa9aa-b1f4-48de-8eb8-0fdb8b0aafb4",
			"name": "Management room users",
			"item": [
				{
					"_postman_id": "df011449-d06c-4eda-9e7d-6d557ed84431",
					"name": "/rooms/{roomId}/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66bac457-86dd-4774-a74b-14b3313bb44d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userIds\": [\"{{randomUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e9431570-88dc-4a54-bf85-1ff2e45238c9",
					"name": "{{apiEndpoint}}/rooms/{{randomRoomId}}/userIds",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}/userIds",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}",
								"userIds"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "93b98e57-899f-413c-9858-5669dfaa8413",
					"name": "/rooms/{roomId}/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66bac457-86dd-4774-a74b-14b3313bb44d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"display\": false\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}",
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c8d5b084-5b6c-4313-9c2a-0bfc1e9216f5",
					"name": "/rooms/{roomId}/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66bac457-86dd-4774-a74b-14b3313bb44d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8caaca86-5b25-4fbb-9364-c3391fc36211",
								"type": "text/javascript",
								"exec": [
									"var randomUserName = \"\";",
									"var char = \"abcdefghijklmnopqrstuvwxyz0123456789-\";",
									"var len = 8;",
									"for (var i = 0; i < len; i++){",
									"  randomUserName += char[Math.floor(Math.random()*len)];",
									"}",
									"postman.setEnvironmentVariable(\"randomUserName\", randomUserName);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/javascript"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userIds\": [\"{{randomUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}/users",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "2688ad52-0529-42ec-95b4-5a003d71eeaa",
			"name": "Management message",
			"item": [
				{
					"_postman_id": "324abcac-070d-413b-8e79-3067e84fee6c",
					"name": "/messages(text)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roomId\":\"{{randomRoomId}}\",\n\t\"userId\":\"{{randomUserId}}\",\n\t\"type\":\"text\",\n\t\"payload\":{\n\t\t\"text\":\"Hello, swagchat!\"\n\t}\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/messages",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "934ecd64-3297-4574-b132-57a599b57d54",
					"name": "/messages(image)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roomId\":\"{{randomRoomId}}\",\n\t\"userId\":\"{{randomUserId}}\",\n\t\"type\": \"image\",\n\t\"payload\": {\n\t\t\"mime\":\"image/png\",\n\t\t\"sourceUrl\":\"http://example.com/img/sample.png\"\n\t}\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/messages",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0eb70f75-4654-4806-9471-e21d3578d086",
					"name": "/messages(indicator-start)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"messageId\":\"indicator-start-6f67bf9c-6af9-4206-b0cf-29e6304f9f9c\",\n\t\"roomId\":\"{{randomRoomId}}\",\n\t\"userId\":\"{{randomUserId}}\",\n\t\"type\":\"indicator-start\",\n\t\"payload\":{\n\t\t\"text\":\"start indicator...\"\n\t}\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/messages",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "05c0fa7b-31d8-424a-9889-9a1fb56fb0a0",
					"name": "/messages(indicator-end)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"messageId\":\"indicator-start-6f67bf9c-6af9-4206-b0cf-29e6304f9f9c\",\n\t\"roomId\":\"{{randomRoomId}}\",\n\t\"userId\":\"{{randomUserId}}\",\n\t\"type\":\"indicator-end\",\n\t\"payload\":{\n\t\t\"text\":\"end indicator\"\n\t}\n}"
						},
						"url": {
							"raw": "{{apiEndpoint}}/messages",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "b0be1434-df0e-432e-b682-5dd167b9f341",
			"name": "Delete resources",
			"item": [
				{
					"_postman_id": "ed561a4c-93d3-43af-a609-30a13ee94b16",
					"name": "/users/{userId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "700d1832-d219-4115-88f3-0dcd440ad301",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.expect(responseBody).not.eql(null);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiEndpoint}}/users/{{randomUserId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"users",
								"{{randomUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d8b1d84a-00ff-47e9-a9ce-c4f8048de77b",
					"name": "/rooms{roomId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e49372c-7d0e-4851-88a5-a37040c69c71",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.expect(responseBody).not.eql(null);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-ClientId",
								"value": "{{xClientId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiEndpoint}}/rooms/{{randomRoomId}}",
							"host": [
								"{{apiEndpoint}}"
							],
							"path": [
								"rooms",
								"{{randomRoomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "ac0be272-40b5-4f10-a979-e2cd9ed0611d",
			"name": "Delete environment variables",
			"item": [
				{
					"_postman_id": "efedfa5a-b297-47fb-a0c0-23ff42c2c843",
					"name": "DELETE_ENVIRONMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56a46721-3350-4a3f-b44d-0c996890f66c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"chat-api [API Version]0 [Build Version]0.9.1\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e48a8e7-99f2-438d-87c2-54c39ebc9b25",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"randomUserName\");",
									"pm.environment.unset(\"randomUserId\");",
									"pm.environment.unset(\"randomDeviceToken\");",
									"pm.environment.unset(\"addBlockUserIds\");",
									"pm.environment.unset(\"deleteBlockUserIds\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}