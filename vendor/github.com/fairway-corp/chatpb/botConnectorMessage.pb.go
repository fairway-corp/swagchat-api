// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: botConnectorMessage.proto

/*
Package chatpb is a generated protocol buffer package.

It is generated from these files:
	botConnectorMessage.proto
	botConnectorService.proto
	indexMessage.proto
	indexService.proto
	messageConnectorMessage.proto
	messageConnectorService.proto
	operatorMessage.proto
	operatorService.proto

It has these top-level messages:
	Conversations
	Conversation
	Agents
	Agent
	Intents
	Intent
	Response
	ConversationMessage
	QueryInput
	QueryResult
	StatusRequest
	StatusResponse
	BotPayload
	BotAction
	BotColumn
	LineMessage
	LineMessagePayload
	OutgoingMessageLineRequest
	SlackMessage
	OutgoingMessageSlackRequest
	Bot
	GuestSetting
	OperatorSetting
	CreateBotRequest
	GetBotRequest
	CreateGuestRequest
	GetGuestRequest
	CreateGuestSettingRequest
	GetGuestSettingRequest
	UpdateGuestSettingRequest
	CreateOperatorSettingRequest
	GetOperatorSettingRequest
	UpdateOperatorSettingRequest
*/
package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Conversation_Service int32

const (
	Conversation_NONE       Conversation_Service = 0
	Conversation_DIALOGFLOW Conversation_Service = 1
)

var Conversation_Service_name = map[int32]string{
	0: "NONE",
	1: "DIALOGFLOW",
}
var Conversation_Service_value = map[string]int32{
	"NONE":       0,
	"DIALOGFLOW": 1,
}

func (x Conversation_Service) String() string {
	return proto.EnumName(Conversation_Service_name, int32(x))
}
func (Conversation_Service) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBotConnectorMessage, []int{1, 0}
}

type Response_Type int32

const (
	Response_TEXT    Response_Type = 0
	Response_PAYLOAD Response_Type = 1
)

var Response_Type_name = map[int32]string{
	0: "TEXT",
	1: "PAYLOAD",
}
var Response_Type_value = map[string]int32{
	"TEXT":    0,
	"PAYLOAD": 1,
}

func (x Response_Type) String() string {
	return proto.EnumName(Response_Type_name, int32(x))
}
func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBotConnectorMessage, []int{6, 0}
}

type Conversations struct {
	AllCount      int64           `protobuf:"varint,1,opt,name=allCount,proto3" json:"allCount,omitempty"`
	Limit         int32           `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32           `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Order         string          `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Conversations []*Conversation `protobuf:"bytes,5,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *Conversations) Reset()                    { *m = Conversations{} }
func (m *Conversations) String() string            { return proto.CompactTextString(m) }
func (*Conversations) ProtoMessage()               {}
func (*Conversations) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{0} }

func (m *Conversations) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *Conversations) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Conversations) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Conversations) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *Conversations) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type Conversation struct {
	// @inject_tag: db:"id"
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// @inject_tag: db:"conversation_id"
	ConversationID string `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	// @inject_tag: db:"service"
	Service Conversation_Service `protobuf:"varint,3,opt,name=service,proto3,enum=fairway.chatpb.Conversation_Service" json:"service,omitempty"`
	// @inject_tag: db:"service_account"
	ServiceAccount []byte `protobuf:"bytes,4,opt,name=serviceAccount,proto3" json:"serviceAccount,omitempty"`
	// @inject_tag: db:"created,notnull"
	Created int64 `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	// @inject_tag: db:"modified,notnull"
	Modified int64 `protobuf:"varint,11,opt,name=modified,proto3" json:"modified,omitempty"`
	// @inject_tag: db:"deleted,notnull"
	Deleted int64 `protobuf:"varint,12,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *Conversation) Reset()                    { *m = Conversation{} }
func (m *Conversation) String() string            { return proto.CompactTextString(m) }
func (*Conversation) ProtoMessage()               {}
func (*Conversation) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{1} }

func (m *Conversation) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Conversation) GetConversationID() string {
	if m != nil {
		return m.ConversationID
	}
	return ""
}

func (m *Conversation) GetService() Conversation_Service {
	if m != nil {
		return m.Service
	}
	return Conversation_NONE
}

func (m *Conversation) GetServiceAccount() []byte {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *Conversation) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Conversation) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *Conversation) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

type Agents struct {
	AllCount int64    `protobuf:"varint,1,opt,name=allCount,proto3" json:"allCount,omitempty"`
	Limit    int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Order    string   `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Agents   []*Agent `protobuf:"bytes,5,rep,name=agents" json:"agents,omitempty"`
}

func (m *Agents) Reset()                    { *m = Agents{} }
func (m *Agents) String() string            { return proto.CompactTextString(m) }
func (*Agents) ProtoMessage()               {}
func (*Agents) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{2} }

func (m *Agents) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *Agents) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Agents) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Agents) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *Agents) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type Agent struct {
	// @inject_tag: db:"id"
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// @inject_tag: db:"agent_id,notnull"
	AgentID string `protobuf:"bytes,2,opt,name=agentID,proto3" json:"agentID,omitempty"`
	// @inject_tag: db:"name"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: db:"description"
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// @inject_tag: db:"created,notnull"
	Created int64 `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	// @inject_tag: db:"modified,notnull"
	Modified int64 `protobuf:"varint,6,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{3} }

func (m *Agent) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Agent) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *Agent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Agent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Agent) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Agent) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

type Intents struct {
	AllCount int64     `protobuf:"varint,1,opt,name=allCount,proto3" json:"allCount,omitempty"`
	Limit    int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Order    string    `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Intents  []*Intent `protobuf:"bytes,5,rep,name=intents" json:"intents,omitempty"`
}

func (m *Intents) Reset()                    { *m = Intents{} }
func (m *Intents) String() string            { return proto.CompactTextString(m) }
func (*Intents) ProtoMessage()               {}
func (*Intents) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{4} }

func (m *Intents) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *Intents) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Intents) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Intents) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *Intents) GetIntents() []*Intent {
	if m != nil {
		return m.Intents
	}
	return nil
}

type Intent struct {
	IntentID    string      `protobuf:"bytes,1,opt,name=intentID,proto3" json:"intentID,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string      `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Phrases     []string    `protobuf:"bytes,4,rep,name=phrases" json:"phrases,omitempty"`
	Responses   []*Response `protobuf:"bytes,5,rep,name=responses" json:"responses,omitempty"`
}

func (m *Intent) Reset()                    { *m = Intent{} }
func (m *Intent) String() string            { return proto.CompactTextString(m) }
func (*Intent) ProtoMessage()               {}
func (*Intent) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{5} }

func (m *Intent) GetIntentID() string {
	if m != nil {
		return m.IntentID
	}
	return ""
}

func (m *Intent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Intent) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Intent) GetPhrases() []string {
	if m != nil {
		return m.Phrases
	}
	return nil
}

func (m *Intent) GetResponses() []*Response {
	if m != nil {
		return m.Responses
	}
	return nil
}

type Response struct {
	Type    Response_Type        `protobuf:"varint,1,opt,name=type,proto3,enum=fairway.chatpb.Response_Type" json:"type,omitempty"`
	Message *ConversationMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{6} }

func (m *Response) GetType() Response_Type {
	if m != nil {
		return m.Type
	}
	return Response_TEXT
}

func (m *Response) GetMessage() *ConversationMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type ConversationMessage struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *ConversationMessage) Reset()         { *m = ConversationMessage{} }
func (m *ConversationMessage) String() string { return proto.CompactTextString(m) }
func (*ConversationMessage) ProtoMessage()    {}
func (*ConversationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorBotConnectorMessage, []int{7}
}

func (m *ConversationMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type QueryInput struct {
	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	LanguageCode string `protobuf:"bytes,2,opt,name=LanguageCode,proto3" json:"LanguageCode,omitempty"`
}

func (m *QueryInput) Reset()                    { *m = QueryInput{} }
func (m *QueryInput) String() string            { return proto.CompactTextString(m) }
func (*QueryInput) ProtoMessage()               {}
func (*QueryInput) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{8} }

func (m *QueryInput) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *QueryInput) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

type QueryResult struct {
	Text  string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorBotConnectorMessage, []int{9} }

func (m *QueryResult) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *QueryResult) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*Conversations)(nil), "fairway.chatpb.Conversations")
	proto.RegisterType((*Conversation)(nil), "fairway.chatpb.Conversation")
	proto.RegisterType((*Agents)(nil), "fairway.chatpb.Agents")
	proto.RegisterType((*Agent)(nil), "fairway.chatpb.Agent")
	proto.RegisterType((*Intents)(nil), "fairway.chatpb.Intents")
	proto.RegisterType((*Intent)(nil), "fairway.chatpb.Intent")
	proto.RegisterType((*Response)(nil), "fairway.chatpb.Response")
	proto.RegisterType((*ConversationMessage)(nil), "fairway.chatpb.ConversationMessage")
	proto.RegisterType((*QueryInput)(nil), "fairway.chatpb.QueryInput")
	proto.RegisterType((*QueryResult)(nil), "fairway.chatpb.QueryResult")
	proto.RegisterEnum("fairway.chatpb.Conversation_Service", Conversation_Service_name, Conversation_Service_value)
	proto.RegisterEnum("fairway.chatpb.Response_Type", Response_Type_name, Response_Type_value)
}

func init() { proto.RegisterFile("botConnectorMessage.proto", fileDescriptorBotConnectorMessage) }

var fileDescriptorBotConnectorMessage = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x97, 0x36, 0x6d, 0xd6, 0xb7, 0x5d, 0x55, 0x99, 0x31, 0x05, 0xc4, 0x50, 0x94, 0x21,
	0x54, 0x0e, 0xcb, 0xa0, 0x48, 0x70, 0x02, 0xa9, 0x6b, 0x07, 0xaa, 0x54, 0x56, 0x30, 0x93, 0xf8,
	0x73, 0x4b, 0x13, 0xb7, 0x8b, 0xd4, 0xc6, 0x91, 0xed, 0x0e, 0xfa, 0x49, 0x38, 0x20, 0x4e, 0x5c,
	0xb9, 0xf1, 0x05, 0x91, 0xff, 0xa4, 0x4b, 0xcb, 0xb6, 0x1b, 0xdc, 0xfc, 0xbc, 0x79, 0x1f, 0xfb,
	0xc9, 0xef, 0x95, 0x0d, 0x77, 0xc6, 0x54, 0xf4, 0x68, 0x9a, 0x92, 0x48, 0x50, 0xf6, 0x86, 0x70,
	0x1e, 0x4e, 0x49, 0x90, 0x31, 0x2a, 0x28, 0x6a, 0x4e, 0xc2, 0x84, 0x7d, 0x09, 0x97, 0x41, 0x74,
	0x1e, 0x8a, 0x6c, 0xec, 0xff, 0xb6, 0x60, 0xa7, 0x47, 0xd3, 0x0b, 0xc2, 0x78, 0x28, 0x12, 0x9a,
	0x72, 0x74, 0x17, 0xb6, 0xc3, 0xd9, 0xac, 0x47, 0x17, 0xa9, 0x70, 0x2d, 0xcf, 0x6a, 0x97, 0xf1,
	0x4a, 0xa3, 0x5d, 0xa8, 0xcc, 0x92, 0x79, 0x22, 0xdc, 0x92, 0x67, 0xb5, 0x2b, 0x58, 0x0b, 0xb4,
	0x07, 0x55, 0x3a, 0x99, 0x70, 0x22, 0xdc, 0xb2, 0x2a, 0x1b, 0x25, 0xbb, 0x29, 0x8b, 0x09, 0x73,
	0x6d, 0xcf, 0x6a, 0xd7, 0xb0, 0x16, 0xe8, 0x18, 0x76, 0xa2, 0xe2, 0x81, 0x6e, 0xc5, 0x2b, 0xb7,
	0xeb, 0x9d, 0x7b, 0xc1, 0x7a, 0xb2, 0xa0, 0x98, 0x0a, 0xaf, 0x5b, 0xfc, 0x9f, 0x25, 0x68, 0x14,
	0xbf, 0xa3, 0x26, 0x94, 0x06, 0x7d, 0x15, 0xd7, 0xc6, 0xa5, 0x41, 0x1f, 0x3d, 0x84, 0x66, 0xd1,
	0x31, 0xe8, 0xab, 0xc4, 0x35, 0xbc, 0x51, 0x45, 0x2f, 0xc1, 0xe1, 0x84, 0x5d, 0x24, 0x11, 0x51,
	0xd9, 0x9b, 0x9d, 0x07, 0x37, 0xc5, 0x08, 0xde, 0xeb, 0x5e, 0x9c, 0x9b, 0xe4, 0x39, 0x66, 0xd9,
	0x8d, 0x22, 0x85, 0x4c, 0xfe, 0x6b, 0x03, 0x6f, 0x54, 0x91, 0x0b, 0x4e, 0xc4, 0x48, 0x28, 0x48,
	0xec, 0x82, 0x62, 0x9a, 0x4b, 0x89, 0x7b, 0x4e, 0xe3, 0x64, 0x92, 0x90, 0xd8, 0xad, 0x6b, 0xdc,
	0xb9, 0x96, 0xae, 0x98, 0xcc, 0x88, 0x74, 0x35, 0xb4, 0xcb, 0x48, 0xff, 0x00, 0x1c, 0x93, 0x05,
	0x6d, 0x83, 0x7d, 0x3a, 0x3a, 0x3d, 0x69, 0x6d, 0xa1, 0x26, 0x40, 0x7f, 0xd0, 0x1d, 0x8e, 0x5e,
	0xbf, 0x1a, 0x8e, 0x3e, 0xb4, 0x2c, 0xff, 0x9b, 0x05, 0xd5, 0xee, 0x94, 0xa4, 0xe2, 0xdf, 0x0f,
	0xf5, 0x10, 0xaa, 0xa1, 0x3a, 0xc9, 0x4c, 0xf3, 0xf6, 0x26, 0x46, 0x95, 0x03, 0x9b, 0x26, 0xff,
	0x87, 0x05, 0x15, 0x55, 0xf9, 0x6b, 0x70, 0x2e, 0x38, 0xaa, 0x67, 0x35, 0xb1, 0x5c, 0x22, 0x04,
	0x76, 0x1a, 0xce, 0xf5, 0x9c, 0x6a, 0x58, 0xad, 0x91, 0x07, 0xf5, 0x98, 0xf0, 0x88, 0x25, 0x99,
	0x1c, 0x8f, 0x89, 0x54, 0x2c, 0x15, 0xc1, 0x57, 0xae, 0x07, 0x5f, 0x5d, 0x07, 0xef, 0x7f, 0xb7,
	0xc0, 0x19, 0xa4, 0xe2, 0xbf, 0xa0, 0x7b, 0x0c, 0x4e, 0xa2, 0x8f, 0x32, 0xec, 0xf6, 0x36, 0xd9,
	0xe9, 0x24, 0x38, 0x6f, 0xf3, 0x7f, 0x59, 0x50, 0xd5, 0x35, 0x19, 0x4e, 0x57, 0x0d, 0xc4, 0x1a,
	0x5e, 0xe9, 0x15, 0xb0, 0xd2, 0x06, 0xb0, 0x84, 0x67, 0xb3, 0x70, 0x79, 0x7a, 0xc9, 0xb2, 0x58,
	0x92, 0xc0, 0xb2, 0x73, 0x16, 0x72, 0xc2, 0x5d, 0xdb, 0x2b, 0xcb, 0x01, 0x18, 0x89, 0x9e, 0x41,
	0x8d, 0x11, 0x9e, 0xd1, 0x54, 0x7e, 0xd3, 0x51, 0xdd, 0xcd, 0xa8, 0xd8, 0x34, 0xe0, 0xcb, 0x56,
	0x09, 0x73, 0x3b, 0xaf, 0xa3, 0x27, 0x60, 0x8b, 0x65, 0x46, 0x54, 0xd8, 0x66, 0x67, 0xff, 0x3a,
	0x7f, 0x70, 0xb6, 0xcc, 0x08, 0x56, 0xad, 0xe8, 0x05, 0x38, 0x73, 0xfd, 0x86, 0xa9, 0x5f, 0xa9,
	0x77, 0x0e, 0x6e, 0xba, 0xa3, 0xe6, 0xb9, 0xc3, 0xb9, 0xc7, 0xdf, 0x07, 0x5b, 0x6e, 0x26, 0xef,
	0xc9, 0xd9, 0xc9, 0xc7, 0xb3, 0xd6, 0x16, 0xaa, 0x83, 0xf3, 0xb6, 0xfb, 0x69, 0x38, 0xea, 0xf6,
	0x5b, 0x96, 0xff, 0x08, 0x6e, 0x5d, 0x61, 0x97, 0xf0, 0x04, 0xf9, 0x2a, 0x0c, 0x54, 0xb5, 0xf6,
	0xfb, 0x00, 0xef, 0x16, 0x84, 0x2d, 0x07, 0x69, 0xb6, 0x10, 0x57, 0x75, 0x20, 0x1f, 0x1a, 0xc3,
	0x30, 0x9d, 0x2e, 0xc2, 0x29, 0xe9, 0xd1, 0x38, 0x47, 0xbf, 0x56, 0xf3, 0x9f, 0x43, 0x5d, 0xed,
	0x82, 0x09, 0x5f, 0xcc, 0xae, 0xde, 0x66, 0x17, 0x2a, 0x3c, 0xa2, 0x4c, 0xfb, 0x4b, 0x58, 0x8b,
	0x63, 0xef, 0xf3, 0xfd, 0x69, 0x22, 0xce, 0x17, 0xe3, 0x20, 0xa2, 0xf3, 0x23, 0x83, 0xe0, 0x30,
	0xa2, 0x2c, 0x3b, 0xd2, 0x1c, 0xc6, 0x55, 0xf5, 0xc6, 0x3f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0x11, 0x38, 0x59, 0x00, 0x06, 0x00, 0x00,
}
