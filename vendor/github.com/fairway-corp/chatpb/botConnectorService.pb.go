// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: botConnectorService.proto

package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BotConnector service

type BotConnectorClient interface {
	PostAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error)
	GetAgents(ctx context.Context, in *Agents, opts ...grpc.CallOption) (*Agents, error)
	GetAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error)
	PutAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DeleteAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	PostIntent(ctx context.Context, in *Intent, opts ...grpc.CallOption) (*Intent, error)
	GetIntents(ctx context.Context, in *Intents, opts ...grpc.CallOption) (*Intents, error)
	// rpc GetIntent (Intent) returns (Intent) {
	//   option (google.api.http) = {
	//     get: "/intents/{intentID}"
	//   };
	// }
	PutIntent(ctx context.Context, in *Intent, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Query(ctx context.Context, in *QueryInput, opts ...grpc.CallOption) (*QueryResult, error)
}

type botConnectorClient struct {
	cc *grpc.ClientConn
}

func NewBotConnectorClient(cc *grpc.ClientConn) BotConnectorClient {
	return &botConnectorClient{cc}
}

func (c *botConnectorClient) PostAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/PostAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) GetAgents(ctx context.Context, in *Agents, opts ...grpc.CallOption) (*Agents, error) {
	out := new(Agents)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/GetAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) GetAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/GetAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) PutAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/PutAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) DeleteAgent(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/DeleteAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) PostIntent(ctx context.Context, in *Intent, opts ...grpc.CallOption) (*Intent, error) {
	out := new(Intent)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/PostIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) GetIntents(ctx context.Context, in *Intents, opts ...grpc.CallOption) (*Intents, error) {
	out := new(Intents)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/GetIntents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) PutIntent(ctx context.Context, in *Intent, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/PutIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botConnectorClient) Query(ctx context.Context, in *QueryInput, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotConnector/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotConnector service

type BotConnectorServer interface {
	PostAgent(context.Context, *Agent) (*Agent, error)
	GetAgents(context.Context, *Agents) (*Agents, error)
	GetAgent(context.Context, *Agent) (*Agent, error)
	PutAgent(context.Context, *Agent) (*google_protobuf1.Empty, error)
	DeleteAgent(context.Context, *Agent) (*google_protobuf1.Empty, error)
	PostIntent(context.Context, *Intent) (*Intent, error)
	GetIntents(context.Context, *Intents) (*Intents, error)
	// rpc GetIntent (Intent) returns (Intent) {
	//   option (google.api.http) = {
	//     get: "/intents/{intentID}"
	//   };
	// }
	PutIntent(context.Context, *Intent) (*google_protobuf1.Empty, error)
	Query(context.Context, *QueryInput) (*QueryResult, error)
}

func RegisterBotConnectorServer(s *grpc.Server, srv BotConnectorServer) {
	s.RegisterService(&_BotConnector_serviceDesc, srv)
}

func _BotConnector_PostAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).PostAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/PostAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).PostAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_GetAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).GetAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/GetAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).GetAgents(ctx, req.(*Agents))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).GetAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_PutAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).PutAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/PutAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).PutAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).DeleteAgent(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_PostIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Intent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).PostIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/PostIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).PostIntent(ctx, req.(*Intent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_GetIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Intents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).GetIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/GetIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).GetIntents(ctx, req.(*Intents))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_PutIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Intent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).PutIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/PutIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).PutIntent(ctx, req.(*Intent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotConnector_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotConnectorServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotConnector/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotConnectorServer).Query(ctx, req.(*QueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotConnector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.BotConnector",
	HandlerType: (*BotConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAgent",
			Handler:    _BotConnector_PostAgent_Handler,
		},
		{
			MethodName: "GetAgents",
			Handler:    _BotConnector_GetAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _BotConnector_GetAgent_Handler,
		},
		{
			MethodName: "PutAgent",
			Handler:    _BotConnector_PutAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _BotConnector_DeleteAgent_Handler,
		},
		{
			MethodName: "PostIntent",
			Handler:    _BotConnector_PostIntent_Handler,
		},
		{
			MethodName: "GetIntents",
			Handler:    _BotConnector_GetIntents_Handler,
		},
		{
			MethodName: "PutIntent",
			Handler:    _BotConnector_PutIntent_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _BotConnector_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "botConnectorService.proto",
}

func init() { proto.RegisterFile("botConnectorService.proto", fileDescriptorBotConnectorService) }

var fileDescriptorBotConnectorService = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4f, 0x6b, 0x22, 0x31,
	0x18, 0xc6, 0x71, 0x61, 0x5d, 0x27, 0xba, 0x7f, 0x8c, 0xac, 0xbb, 0x46, 0x91, 0x25, 0x47, 0x61,
	0x13, 0xd8, 0xbd, 0x79, 0x5b, 0xd7, 0x22, 0x42, 0x85, 0xb1, 0x1e, 0x84, 0xf6, 0x94, 0x19, 0xe2,
	0x38, 0xa0, 0xc9, 0x74, 0x92, 0x69, 0x11, 0xe9, 0xa5, 0xb7, 0x9e, 0xfb, 0xd1, 0xfa, 0x15, 0xfa,
	0x41, 0xca, 0x64, 0x32, 0xa5, 0xd6, 0xb1, 0xa5, 0x3d, 0x69, 0x9e, 0x67, 0xde, 0xdf, 0xfb, 0xe4,
	0x09, 0x68, 0x79, 0x52, 0xff, 0x97, 0x42, 0x70, 0x5f, 0xcb, 0x78, 0xc6, 0xe3, 0x8b, 0xd0, 0xe7,
	0x24, 0x8a, 0xa5, 0x96, 0xf0, 0xcb, 0x82, 0x85, 0xf1, 0x25, 0xdb, 0x10, 0x7f, 0xc9, 0x74, 0xe4,
	0xa1, 0x4e, 0x20, 0x65, 0xb0, 0xe2, 0x94, 0x45, 0x21, 0x65, 0x42, 0x48, 0xcd, 0x74, 0x28, 0x85,
	0xca, 0xbe, 0x46, 0x6d, 0xeb, 0x9a, 0x93, 0x97, 0x2c, 0x28, 0x5f, 0x47, 0x7a, 0x63, 0xcd, 0x9d,
	0x2d, 0x13, 0xae, 0x14, 0x0b, 0xec, 0x96, 0x3f, 0x37, 0x65, 0x50, 0x1b, 0x3c, 0x71, 0xe1, 0x04,
	0x38, 0xae, 0x54, 0xfa, 0x5f, 0xc0, 0x85, 0x86, 0xdf, 0xc9, 0x6e, 0x08, 0x62, 0x64, 0x54, 0x2c,
	0x63, 0x78, 0x7d, 0x77, 0x7f, 0xfb, 0xa1, 0x86, 0x3f, 0x51, 0x96, 0x9e, 0x55, 0xbf, 0xd4, 0x83,
	0xc7, 0xc0, 0x19, 0xf1, 0x8c, 0xa6, 0x60, 0xb3, 0x70, 0x4e, 0xa1, 0x03, 0x3a, 0xfe, 0x6a, 0x80,
	0x0e, 0xcc, 0x81, 0x70, 0x06, 0x2a, 0x39, 0xed, 0x8d, 0xd9, 0x5a, 0x06, 0xd5, 0x80, 0x75, 0x8b,
	0xa2, 0x5b, 0xf3, 0x3b, 0x1e, 0x5e, 0xc1, 0x39, 0xa8, 0xb8, 0xc9, 0xcb, 0xd0, 0x26, 0xc9, 0xea,
	0x25, 0x79, 0xbd, 0xe4, 0x28, 0xad, 0x17, 0x77, 0x0c, 0xb5, 0x89, 0xf6, 0xa9, 0xe9, 0xdd, 0xe7,
	0xa0, 0x3a, 0xe4, 0x2b, 0xae, 0xf9, 0xbb, 0xd8, 0x36, 0x71, 0xaf, 0x20, 0xf1, 0x14, 0x80, 0xf4,
	0x8d, 0xc6, 0x42, 0xa7, 0xdc, 0xbd, 0xf6, 0x32, 0x1d, 0x1d, 0xd0, 0x71, 0xc3, 0x80, 0x3f, 0xe3,
	0x0a, 0x0d, 0x8d, 0x60, 0xde, 0xc9, 0x05, 0x60, 0xc4, 0x2d, 0x51, 0xc1, 0x1f, 0xc5, 0xa3, 0x0a,
	0x1d, 0x32, 0xf0, 0x37, 0x03, 0x05, 0xf0, 0x11, 0x0a, 0xcf, 0x80, 0xe3, 0x26, 0xaf, 0x67, 0x2c,
	0xbe, 0x7c, 0xd7, 0xe0, 0x7e, 0xa2, 0x46, 0x8e, 0xa3, 0xdb, 0xec, 0x8f, 0xad, 0x76, 0x06, 0x3e,
	0x4e, 0x13, 0x1e, 0x6f, 0x20, 0x7a, 0x0e, 0x36, 0xf2, 0x58, 0x44, 0x89, 0x46, 0xed, 0x42, 0xef,
	0x84, 0xab, 0x64, 0xa5, 0x71, 0xdd, 0x6c, 0xa8, 0xe2, 0x32, 0x3d, 0x4f, 0xd5, 0x7e, 0xa9, 0x37,
	0xf8, 0x75, 0xda, 0x0d, 0x42, 0xbd, 0x4c, 0x3c, 0xe2, 0xcb, 0x35, 0xb5, 0xb3, 0xbf, 0x7d, 0x19,
	0x47, 0x34, 0x03, 0x78, 0x65, 0x13, 0xf3, 0xef, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0xde,
	0x27, 0x79, 0xb7, 0x03, 0x00, 0x00,
}
