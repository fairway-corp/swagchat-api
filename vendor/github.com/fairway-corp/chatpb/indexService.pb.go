// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexService.proto

package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Index service

type IndexClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type indexClient struct {
	cc *grpc.ClientConn
}

func NewIndexClient(cc *grpc.ClientConn) IndexClient {
	return &indexClient{cc}
}

func (c *indexClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/fairway.chatpb.Index/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Index service

type IndexServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterIndexServer(s *grpc.Server, srv IndexServer) {
	s.RegisterService(&_Index_serviceDesc, srv)
}

func _Index_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.Index/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Index_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.Index",
	HandlerType: (*IndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Index_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexService.proto",
}

func init() { proto.RegisterFile("indexService.proto", fileDescriptorIndexService) }

var fileDescriptorIndexService = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcc, 0x4b, 0x49,
	0xad, 0x08, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4b, 0x4b, 0xcc, 0x2c, 0x2a, 0x4f, 0xac, 0xd4, 0x4b, 0xce, 0x48, 0x2c, 0x29, 0x48, 0x92, 0x92,
	0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f,
	0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x96, 0x82, 0x98, 0xe0, 0x9b, 0x5a, 0x5c, 0x9c,
	0x98, 0x0e, 0x35, 0xc1, 0x28, 0x91, 0x8b, 0xd5, 0x13, 0x24, 0x2a, 0x14, 0xc1, 0xc5, 0x16, 0x5c,
	0x92, 0x58, 0x52, 0x5a, 0x2c, 0x24, 0xab, 0x87, 0x6a, 0xaa, 0x1e, 0x44, 0x3c, 0x28, 0xb5, 0xb0,
	0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x0e, 0x97, 0x74, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x12, 0x7f,
	0xd3, 0xe5, 0x27, 0x93, 0x99, 0x38, 0x85, 0xd8, 0xf5, 0x8b, 0xc1, 0x12, 0x4e, 0x0a, 0x51, 0x72,
	0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x50, 0xcd, 0xba, 0xc9, 0xf9,
	0x45, 0x05, 0xfa, 0x10, 0x13, 0x92, 0xd8, 0xc0, 0x6e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x5a, 0x8b, 0x0b, 0xf2, 0xe3, 0x00, 0x00, 0x00,
}
