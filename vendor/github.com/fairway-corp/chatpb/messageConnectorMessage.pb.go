// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messageConnectorMessage.proto

package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BotPayload struct {
	Text                 *string      `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Actions              []*BotAction `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	Type                 *string      `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ThumbnailImageURL    *string      `protobuf:"bytes,4,opt,name=thumbnailImageUrl" json:"thumbnailImageUrl"`
	ImageAspectRatio     *string      `protobuf:"bytes,5,opt,name=imageAspectRatio" json:"imageAspectRatio"`
	ImageSize            *string      `protobuf:"bytes,6,opt,name=imageSize" json:"imageSize"`
	ImageBackgroundColor *string      `protobuf:"bytes,7,opt,name=imageBackgroundColor" json:"imageBackgroundColor"`
	Title                *string      `protobuf:"bytes,8,opt,name=title" json:"title,omitempty"`
	DefaultAction        *BotAction   `protobuf:"bytes,9,opt,name=defaultAction" json:"defaultAction"`
	Columns              []*BotColumn `protobuf:"bytes,10,rep,name=columns" json:"columns,omitempty"`
	Score                *float32     `protobuf:"fixed32,11,opt,name=score" json:"score,omitempty"`
}

func (m *BotPayload) Reset()         { *m = BotPayload{} }
func (m *BotPayload) String() string { return proto.CompactTextString(m) }
func (*BotPayload) ProtoMessage()    {}
func (*BotPayload) Descriptor() ([]byte, []int) {
	return fileDescriptorMessageConnectorMessage, []int{0}
}

func (m *BotPayload) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *BotPayload) GetActions() []*BotAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *BotPayload) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *BotPayload) GetThumbnailImageURL() string {
	if m != nil && m.ThumbnailImageURL != nil {
		return *m.ThumbnailImageURL
	}
	return ""
}

func (m *BotPayload) GetImageAspectRatio() string {
	if m != nil && m.ImageAspectRatio != nil {
		return *m.ImageAspectRatio
	}
	return ""
}

func (m *BotPayload) GetImageSize() string {
	if m != nil && m.ImageSize != nil {
		return *m.ImageSize
	}
	return ""
}

func (m *BotPayload) GetImageBackgroundColor() string {
	if m != nil && m.ImageBackgroundColor != nil {
		return *m.ImageBackgroundColor
	}
	return ""
}

func (m *BotPayload) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BotPayload) GetDefaultAction() *BotAction {
	if m != nil {
		return m.DefaultAction
	}
	return nil
}

func (m *BotPayload) GetColumns() []*BotColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *BotPayload) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type BotAction struct {
	Type        *string `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Label       *string `protobuf:"bytes,12,opt,name=label" json:"label,omitempty"`
	Data        *string `protobuf:"bytes,14,opt,name=data" json:"data,omitempty"`
	DisplayText *string `protobuf:"bytes,15,opt,name=displayText" json:"displayText"`
	Text        *string `protobuf:"bytes,16,opt,name=text" json:"text,omitempty"`
}

func (m *BotAction) Reset()                    { *m = BotAction{} }
func (m *BotAction) String() string            { return proto.CompactTextString(m) }
func (*BotAction) ProtoMessage()               {}
func (*BotAction) Descriptor() ([]byte, []int) { return fileDescriptorMessageConnectorMessage, []int{1} }

func (m *BotAction) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *BotAction) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *BotAction) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *BotAction) GetDisplayText() string {
	if m != nil && m.DisplayText != nil {
		return *m.DisplayText
	}
	return ""
}

func (m *BotAction) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type BotColumn struct {
	ThumbnailImageURL    *string      `protobuf:"bytes,1,opt,name=thumbnailImageUrl" json:"thumbnailImageUrl"`
	ImageBackgroundColor *string      `protobuf:"bytes,2,opt,name=imageBackgroundColor" json:"imageBackgroundColor"`
	Title                *string      `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Text                 *string      `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	DefaultAction        *BotAction   `protobuf:"bytes,5,opt,name=defaultAction" json:"defaultAction"`
	Actions              []*BotAction `protobuf:"bytes,6,rep,name=actions" json:"actions,omitempty"`
	ImageUrl             *string      `protobuf:"bytes,7,opt,name=imageUrl" json:"imageUrl"`
	Action               *BotAction   `protobuf:"bytes,8,opt,name=action" json:"action,omitempty"`
}

func (m *BotColumn) Reset()                    { *m = BotColumn{} }
func (m *BotColumn) String() string            { return proto.CompactTextString(m) }
func (*BotColumn) ProtoMessage()               {}
func (*BotColumn) Descriptor() ([]byte, []int) { return fileDescriptorMessageConnectorMessage, []int{2} }

func (m *BotColumn) GetThumbnailImageURL() string {
	if m != nil && m.ThumbnailImageURL != nil {
		return *m.ThumbnailImageURL
	}
	return ""
}

func (m *BotColumn) GetImageBackgroundColor() string {
	if m != nil && m.ImageBackgroundColor != nil {
		return *m.ImageBackgroundColor
	}
	return ""
}

func (m *BotColumn) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BotColumn) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *BotColumn) GetDefaultAction() *BotAction {
	if m != nil {
		return m.DefaultAction
	}
	return nil
}

func (m *BotColumn) GetActions() []*BotAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *BotColumn) GetImageUrl() string {
	if m != nil && m.ImageUrl != nil {
		return *m.ImageUrl
	}
	return ""
}

func (m *BotColumn) GetAction() *BotAction {
	if m != nil {
		return m.Action
	}
	return nil
}

type LineMessage struct {
	To       *string               `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Messages []*LineMessagePayload `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *LineMessage) Reset()         { *m = LineMessage{} }
func (m *LineMessage) String() string { return proto.CompactTextString(m) }
func (*LineMessage) ProtoMessage()    {}
func (*LineMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorMessageConnectorMessage, []int{3}
}

func (m *LineMessage) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *LineMessage) GetMessages() []*LineMessagePayload {
	if m != nil {
		return m.Messages
	}
	return nil
}

type LineMessagePayload struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *LineMessagePayload) Reset()         { *m = LineMessagePayload{} }
func (m *LineMessagePayload) String() string { return proto.CompactTextString(m) }
func (*LineMessagePayload) ProtoMessage()    {}
func (*LineMessagePayload) Descriptor() ([]byte, []int) {
	return fileDescriptorMessageConnectorMessage, []int{4}
}

func (m *LineMessagePayload) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LineMessagePayload) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type OutgoingMessageLineRequest struct {
	Endpoint string       `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint"`
	Message  *LineMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *OutgoingMessageLineRequest) Reset()         { *m = OutgoingMessageLineRequest{} }
func (m *OutgoingMessageLineRequest) String() string { return proto.CompactTextString(m) }
func (*OutgoingMessageLineRequest) ProtoMessage()    {}
func (*OutgoingMessageLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMessageConnectorMessage, []int{5}
}

func (m *OutgoingMessageLineRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *OutgoingMessageLineRequest) GetMessage() *LineMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type SlackMessage struct {
	Text string `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *SlackMessage) Reset()         { *m = SlackMessage{} }
func (m *SlackMessage) String() string { return proto.CompactTextString(m) }
func (*SlackMessage) ProtoMessage()    {}
func (*SlackMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorMessageConnectorMessage, []int{6}
}

func (m *SlackMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type OutgoingMessageSlackRequest struct {
	Endpoint string        `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint"`
	Message  *SlackMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *OutgoingMessageSlackRequest) Reset()         { *m = OutgoingMessageSlackRequest{} }
func (m *OutgoingMessageSlackRequest) String() string { return proto.CompactTextString(m) }
func (*OutgoingMessageSlackRequest) ProtoMessage()    {}
func (*OutgoingMessageSlackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMessageConnectorMessage, []int{7}
}

func (m *OutgoingMessageSlackRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *OutgoingMessageSlackRequest) GetMessage() *SlackMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*BotPayload)(nil), "fairway.chatpb.BotPayload")
	proto.RegisterType((*BotAction)(nil), "fairway.chatpb.BotAction")
	proto.RegisterType((*BotColumn)(nil), "fairway.chatpb.BotColumn")
	proto.RegisterType((*LineMessage)(nil), "fairway.chatpb.LineMessage")
	proto.RegisterType((*LineMessagePayload)(nil), "fairway.chatpb.LineMessagePayload")
	proto.RegisterType((*OutgoingMessageLineRequest)(nil), "fairway.chatpb.OutgoingMessageLineRequest")
	proto.RegisterType((*SlackMessage)(nil), "fairway.chatpb.SlackMessage")
	proto.RegisterType((*OutgoingMessageSlackRequest)(nil), "fairway.chatpb.OutgoingMessageSlackRequest")
}
func (m *BotPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Text != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Text)))
		i += copy(dAtA[i:], *m.Text)
	}
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if m.ThumbnailImageURL != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ThumbnailImageURL)))
		i += copy(dAtA[i:], *m.ThumbnailImageURL)
	}
	if m.ImageAspectRatio != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ImageAspectRatio)))
		i += copy(dAtA[i:], *m.ImageAspectRatio)
	}
	if m.ImageSize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ImageSize)))
		i += copy(dAtA[i:], *m.ImageSize)
	}
	if m.ImageBackgroundColor != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ImageBackgroundColor)))
		i += copy(dAtA[i:], *m.ImageBackgroundColor)
	}
	if m.Title != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.DefaultAction != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(m.DefaultAction.Size()))
		n1, err := m.DefaultAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x52
			i++
			i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Score != nil {
		dAtA[i] = 0x5d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Score))))
		i += 4
	}
	return i, nil
}

func (m *BotAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if m.Label != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Label)))
		i += copy(dAtA[i:], *m.Label)
	}
	if m.Data != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Data)))
		i += copy(dAtA[i:], *m.Data)
	}
	if m.DisplayText != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.DisplayText)))
		i += copy(dAtA[i:], *m.DisplayText)
	}
	if m.Text != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Text)))
		i += copy(dAtA[i:], *m.Text)
	}
	return i, nil
}

func (m *BotColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ThumbnailImageURL != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ThumbnailImageURL)))
		i += copy(dAtA[i:], *m.ThumbnailImageURL)
	}
	if m.ImageBackgroundColor != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ImageBackgroundColor)))
		i += copy(dAtA[i:], *m.ImageBackgroundColor)
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Text != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.Text)))
		i += copy(dAtA[i:], *m.Text)
	}
	if m.DefaultAction != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(m.DefaultAction.Size()))
		n2, err := m.DefaultAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ImageUrl != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.ImageUrl)))
		i += copy(dAtA[i:], *m.ImageUrl)
	}
	if m.Action != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(m.Action.Size()))
		n3, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *LineMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LineMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.To != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(*m.To)))
		i += copy(dAtA[i:], *m.To)
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LineMessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LineMessagePayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *OutgoingMessageLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingMessageLineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(m.Endpoint)))
	i += copy(dAtA[i:], m.Endpoint)
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(m.Message.Size()))
		n4, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SlackMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlackMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *OutgoingMessageSlackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingMessageSlackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(len(m.Endpoint)))
	i += copy(dAtA[i:], m.Endpoint)
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessageConnectorMessage(dAtA, i, uint64(m.Message.Size()))
		n5, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintMessageConnectorMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BotPayload) Size() (n int) {
	var l int
	_ = l
	if m.Text != nil {
		l = len(*m.Text)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessageConnectorMessage(uint64(l))
		}
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.ThumbnailImageURL != nil {
		l = len(*m.ThumbnailImageURL)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.ImageAspectRatio != nil {
		l = len(*m.ImageAspectRatio)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.ImageSize != nil {
		l = len(*m.ImageSize)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.ImageBackgroundColor != nil {
		l = len(*m.ImageBackgroundColor)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.DefaultAction != nil {
		l = m.DefaultAction.Size()
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovMessageConnectorMessage(uint64(l))
		}
	}
	if m.Score != nil {
		n += 5
	}
	return n
}

func (m *BotAction) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Label != nil {
		l = len(*m.Label)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.DisplayText != nil {
		l = len(*m.DisplayText)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Text != nil {
		l = len(*m.Text)
		n += 2 + l + sovMessageConnectorMessage(uint64(l))
	}
	return n
}

func (m *BotColumn) Size() (n int) {
	var l int
	_ = l
	if m.ThumbnailImageURL != nil {
		l = len(*m.ThumbnailImageURL)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.ImageBackgroundColor != nil {
		l = len(*m.ImageBackgroundColor)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Text != nil {
		l = len(*m.Text)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.DefaultAction != nil {
		l = m.DefaultAction.Size()
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessageConnectorMessage(uint64(l))
		}
	}
	if m.ImageUrl != nil {
		l = len(*m.ImageUrl)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	return n
}

func (m *LineMessage) Size() (n int) {
	var l int
	_ = l
	if m.To != nil {
		l = len(*m.To)
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessageConnectorMessage(uint64(l))
		}
	}
	return n
}

func (m *LineMessagePayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovMessageConnectorMessage(uint64(l))
	l = len(m.Text)
	n += 1 + l + sovMessageConnectorMessage(uint64(l))
	return n
}

func (m *OutgoingMessageLineRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Endpoint)
	n += 1 + l + sovMessageConnectorMessage(uint64(l))
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	return n
}

func (m *SlackMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovMessageConnectorMessage(uint64(l))
	return n
}

func (m *OutgoingMessageSlackRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Endpoint)
	n += 1 + l + sovMessageConnectorMessage(uint64(l))
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessageConnectorMessage(uint64(l))
	}
	return n
}

func sovMessageConnectorMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessageConnectorMessage(x uint64) (n int) {
	return sovMessageConnectorMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BotPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &BotAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbnailImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ThumbnailImageURL = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageAspectRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageAspectRatio = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageSize = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageBackgroundColor = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultAction == nil {
				m.DefaultAction = &BotAction{}
			}
			if err := m.DefaultAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &BotColumn{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Score = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DisplayText = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbnailImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ThumbnailImageURL = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageBackgroundColor = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultAction == nil {
				m.DefaultAction = &BotAction{}
			}
			if err := m.DefaultAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &BotAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &BotAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LineMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.To = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &LineMessagePayload{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LineMessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineMessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineMessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingMessageLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingMessageLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingMessageLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &LineMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlackMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlackMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlackMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingMessageSlackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingMessageSlackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingMessageSlackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &SlackMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageConnectorMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageConnectorMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageConnectorMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageConnectorMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageConnectorMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessageConnectorMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessageConnectorMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessageConnectorMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessageConnectorMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageConnectorMessage   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("messageConnectorMessage.proto", fileDescriptorMessageConnectorMessage)
}

var fileDescriptorMessageConnectorMessage = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xae, 0x73, 0x69, 0x93, 0x93, 0x5e, 0x47, 0x59, 0xcc, 0xdf, 0xfe, 0xc4, 0x51, 0x57, 0x11,
	0x97, 0x54, 0x2d, 0x82, 0x05, 0x0b, 0x44, 0xd3, 0x15, 0x52, 0xb9, 0x68, 0x5a, 0x24, 0xc4, 0x6e,
	0xe2, 0x4c, 0xdd, 0x51, 0x1d, 0x8f, 0xb1, 0xc7, 0x82, 0x80, 0x78, 0x0d, 0xf6, 0x3c, 0x07, 0x2f,
	0x50, 0x76, 0x7d, 0x02, 0x0b, 0x65, 0xe9, 0xa7, 0x40, 0x1e, 0x8f, 0x1d, 0x27, 0x69, 0x43, 0x25,
	0xba, 0x3b, 0xe7, 0xcc, 0x77, 0x3e, 0x7f, 0x73, 0xce, 0xe7, 0x81, 0x7b, 0x43, 0x16, 0x04, 0xd4,
	0x66, 0x47, 0xc2, 0x75, 0x99, 0x25, 0x85, 0xff, 0x2a, 0xcd, 0xbb, 0x9e, 0x2f, 0xa4, 0x40, 0xeb,
	0x67, 0x94, 0xfb, 0x9f, 0xe8, 0xa8, 0x6b, 0x9d, 0x53, 0xe9, 0xf5, 0xb7, 0x9b, 0xb6, 0xb0, 0x85,
	0x3a, 0xda, 0x4b, 0xa2, 0x14, 0xb5, 0xfb, 0xb3, 0x02, 0xd0, 0x13, 0xf2, 0x2d, 0x1d, 0x39, 0x82,
	0x0e, 0x10, 0x82, 0x8a, 0x64, 0x9f, 0x25, 0x36, 0xda, 0x46, 0xa7, 0x4e, 0x54, 0x8c, 0x1e, 0xc3,
	0x0a, 0xb5, 0x24, 0x17, 0x6e, 0x80, 0x4b, 0xed, 0x72, 0xa7, 0x71, 0xf0, 0x5f, 0x77, 0x9a, 0xba,
	0xdb, 0x13, 0xf2, 0x50, 0x21, 0x48, 0x86, 0x54, 0x44, 0x23, 0x8f, 0xe1, 0xb2, 0x26, 0x1a, 0x79,
	0x0c, 0xbd, 0x87, 0x2d, 0x79, 0x1e, 0x0e, 0xfb, 0x2e, 0xe5, 0xce, 0xcb, 0x21, 0xb5, 0xd9, 0x3b,
	0xdf, 0xc1, 0x95, 0x04, 0xd0, 0xbb, 0x3f, 0x8e, 0xcc, 0xad, 0xd3, 0xe9, 0x43, 0x72, 0x1c, 0x47,
	0xe6, 0x7c, 0x07, 0x99, 0x2f, 0xa1, 0x17, 0xb0, 0xc9, 0x93, 0xf8, 0x30, 0xf0, 0x98, 0x25, 0x09,
	0x95, 0x5c, 0xe0, 0xaa, 0x22, 0x6e, 0xc6, 0x91, 0x39, 0x77, 0x46, 0xe6, 0x2a, 0xe8, 0x01, 0xd4,
	0x55, 0xed, 0x84, 0x7f, 0x61, 0x78, 0x59, 0xb5, 0xae, 0xc5, 0x91, 0x39, 0x29, 0x92, 0x49, 0x88,
	0x8e, 0xa1, 0xa9, 0x92, 0x1e, 0xb5, 0x2e, 0x6c, 0x5f, 0x84, 0xee, 0xe0, 0x48, 0x38, 0xc2, 0xc7,
	0x2b, 0xaa, 0x0f, 0xc7, 0x91, 0x79, 0xed, 0x39, 0xb9, 0xb6, 0x8a, 0x9a, 0x50, 0x95, 0x5c, 0x3a,
	0x0c, 0xd7, 0xd4, 0xac, 0xd2, 0x04, 0x11, 0x58, 0x1b, 0xb0, 0x33, 0x1a, 0x3a, 0x7a, 0xb4, 0xb8,
	0xde, 0x36, 0x16, 0xce, 0xbe, 0xb7, 0x15, 0x47, 0xe6, 0x74, 0x0f, 0x99, 0x4e, 0x93, 0x4d, 0x5a,
	0xc2, 0x09, 0x87, 0x6e, 0x80, 0xe1, 0xc6, 0x4d, 0x1e, 0x29, 0x04, 0xc9, 0x90, 0x89, 0xbc, 0xc0,
	0x12, 0x3e, 0xc3, 0x8d, 0xb6, 0xd1, 0x29, 0x91, 0x34, 0x79, 0x56, 0xb9, 0xfa, 0x61, 0x2e, 0xed,
	0x7e, 0x37, 0xa0, 0x9e, 0x0b, 0xc8, 0x77, 0xde, 0x28, 0xec, 0xbc, 0x09, 0x55, 0x87, 0xf6, 0x99,
	0x83, 0x57, 0xd3, 0xcb, 0xa9, 0x24, 0x41, 0x0e, 0xa8, 0xa4, 0x78, 0x3d, 0x45, 0x26, 0x31, 0xda,
	0x87, 0xc6, 0x80, 0x07, 0x9e, 0x43, 0x47, 0xa7, 0x89, 0x03, 0x37, 0xd4, 0x2c, 0x37, 0xe2, 0xc8,
	0x2c, 0x96, 0x49, 0x31, 0xc9, 0xdd, 0xba, 0x39, 0x71, 0xab, 0x16, 0xf6, 0xab, 0xac, 0x84, 0xa5,
	0x77, 0xb9, 0xde, 0x78, 0xc6, 0x5d, 0x18, 0xef, 0x26, 0x27, 0x94, 0xfe, 0xcd, 0x09, 0xe5, 0xa2,
	0x13, 0xb2, 0x5b, 0x56, 0x0a, 0xff, 0xe4, 0x9c, 0x3b, 0xaa, 0x77, 0xe2, 0x8e, 0xec, 0x3f, 0x5f,
	0xbe, 0xf5, 0x7f, 0xde, 0x81, 0x1a, 0xcf, 0x26, 0x9a, 0xda, 0x7f, 0x35, 0x8e, 0xcc, 0xbc, 0x46,
	0xf2, 0x08, 0xed, 0xc3, 0x72, 0xda, 0xa4, 0x7c, 0xbe, 0x90, 0x5d, 0x03, 0xf5, 0x2e, 0x2d, 0x68,
	0x1c, 0x73, 0x97, 0xe9, 0xd7, 0x0d, 0xad, 0x43, 0x49, 0x0a, 0xfd, 0x40, 0x95, 0xa4, 0x40, 0xcf,
	0xa1, 0xa6, 0x1f, 0xc2, 0xec, 0x7d, 0xda, 0x9d, 0x65, 0x2e, 0xb4, 0xeb, 0x87, 0x8e, 0xe4, 0x3d,
	0xfa, 0x23, 0xaf, 0x01, 0xcd, 0xa3, 0x10, 0xd6, 0x8e, 0x4e, 0xbd, 0x52, 0xb9, 0x8c, 0xcc, 0x25,
	0xed, 0x6b, 0xac, 0x97, 0x52, 0x9a, 0x3a, 0x99, 0x18, 0xf0, 0x2b, 0x6c, 0xbf, 0x09, 0xa5, 0x2d,
	0xb8, 0x6b, 0x6b, 0xce, 0x84, 0x9e, 0xb0, 0x8f, 0x21, 0x0b, 0x24, 0x6a, 0x43, 0x8d, 0xb9, 0x03,
	0x4f, 0x70, 0x57, 0x4e, 0x71, 0xe7, 0x55, 0xf4, 0x04, 0x56, 0xb4, 0x42, 0xf5, 0x89, 0xc6, 0xc1,
	0xce, 0x82, 0x4b, 0x91, 0x0c, 0xab, 0x3f, 0xde, 0x85, 0xd5, 0x13, 0x87, 0x5a, 0x17, 0xd9, 0xc8,
	0xfe, 0x26, 0xf6, 0x1b, 0xec, 0xcc, 0x88, 0x55, 0xed, 0xb7, 0x57, 0xfb, 0x74, 0x56, 0xed, 0xff,
	0xb3, 0x6a, 0x8b, 0x7a, 0x66, 0xe4, 0xf6, 0x1e, 0x5e, 0x8e, 0x5b, 0xc6, 0xd5, 0xb8, 0x65, 0xfc,
	0x1e, 0xb7, 0x8c, 0x0f, 0x2d, 0x9b, 0xcb, 0xf3, 0xb0, 0xdf, 0xb5, 0xc4, 0x70, 0x4f, 0x93, 0x3c,
	0xb2, 0x84, 0xef, 0xed, 0xa5, 0x4c, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x94, 0x91, 0x13,
	0xf7, 0x06, 0x00, 0x00,
}
