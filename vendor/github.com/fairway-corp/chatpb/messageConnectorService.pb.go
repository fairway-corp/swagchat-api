// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messageConnectorService.proto

package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import swagchat_protobuf "github.com/swagchat/protobuf"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageConnector service

type MessageConnectorClient interface {
	// Outgoing (MessageConnector -> Out)
	OutgoingMessageSwag(ctx context.Context, in *swagchat_protobuf.Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	OutgoingMessageLine(ctx context.Context, in *OutgoingMessageLineRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	OutgoingMessageSlack(ctx context.Context, in *OutgoingMessageSlackRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Incoming (In -> MessageConnector)
	IncomingMessageLine(ctx context.Context, in *LineMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type messageConnectorClient struct {
	cc *grpc.ClientConn
}

func NewMessageConnectorClient(cc *grpc.ClientConn) MessageConnectorClient {
	return &messageConnectorClient{cc}
}

func (c *messageConnectorClient) OutgoingMessageSwag(ctx context.Context, in *swagchat_protobuf.Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.MessageConnector/OutgoingMessageSwag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageConnectorClient) OutgoingMessageLine(ctx context.Context, in *OutgoingMessageLineRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.MessageConnector/OutgoingMessageLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageConnectorClient) OutgoingMessageSlack(ctx context.Context, in *OutgoingMessageSlackRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.MessageConnector/OutgoingMessageSlack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageConnectorClient) IncomingMessageLine(ctx context.Context, in *LineMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.MessageConnector/IncomingMessageLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageConnector service

type MessageConnectorServer interface {
	// Outgoing (MessageConnector -> Out)
	OutgoingMessageSwag(context.Context, *swagchat_protobuf.Message) (*google_protobuf1.Empty, error)
	OutgoingMessageLine(context.Context, *OutgoingMessageLineRequest) (*google_protobuf1.Empty, error)
	OutgoingMessageSlack(context.Context, *OutgoingMessageSlackRequest) (*google_protobuf1.Empty, error)
	// Incoming (In -> MessageConnector)
	IncomingMessageLine(context.Context, *LineMessage) (*google_protobuf1.Empty, error)
}

func RegisterMessageConnectorServer(s *grpc.Server, srv MessageConnectorServer) {
	s.RegisterService(&_MessageConnector_serviceDesc, srv)
}

func _MessageConnector_OutgoingMessageSwag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(swagchat_protobuf.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageConnectorServer).OutgoingMessageSwag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.MessageConnector/OutgoingMessageSwag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageConnectorServer).OutgoingMessageSwag(ctx, req.(*swagchat_protobuf.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageConnector_OutgoingMessageLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutgoingMessageLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageConnectorServer).OutgoingMessageLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.MessageConnector/OutgoingMessageLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageConnectorServer).OutgoingMessageLine(ctx, req.(*OutgoingMessageLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageConnector_OutgoingMessageSlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutgoingMessageSlackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageConnectorServer).OutgoingMessageSlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.MessageConnector/OutgoingMessageSlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageConnectorServer).OutgoingMessageSlack(ctx, req.(*OutgoingMessageSlackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageConnector_IncomingMessageLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageConnectorServer).IncomingMessageLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.MessageConnector/IncomingMessageLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageConnectorServer).IncomingMessageLine(ctx, req.(*LineMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageConnector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.MessageConnector",
	HandlerType: (*MessageConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutgoingMessageSwag",
			Handler:    _MessageConnector_OutgoingMessageSwag_Handler,
		},
		{
			MethodName: "OutgoingMessageLine",
			Handler:    _MessageConnector_OutgoingMessageLine_Handler,
		},
		{
			MethodName: "OutgoingMessageSlack",
			Handler:    _MessageConnector_OutgoingMessageSlack_Handler,
		},
		{
			MethodName: "IncomingMessageLine",
			Handler:    _MessageConnector_IncomingMessageLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messageConnectorService.proto",
}

func init() {
	proto.RegisterFile("messageConnectorService.proto", fileDescriptorMessageConnectorService)
}

var fileDescriptorMessageConnectorService = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xe9, 0xff, 0x83, 0x8b, 0x2c, 0x44, 0xa6, 0x45, 0x25, 0x6d, 0x45, 0xe2, 0xae, 0xe2,
	0x0c, 0xe8, 0xce, 0xa5, 0xe2, 0x42, 0xb0, 0x08, 0x76, 0xe7, 0x6e, 0x32, 0xdc, 0x4e, 0x07, 0x93,
	0xb9, 0x71, 0x66, 0x62, 0xe8, 0x42, 0x10, 0x5f, 0xc1, 0x47, 0xf3, 0x15, 0x7c, 0x03, 0x5f, 0x40,
	0x26, 0x19, 0x91, 0x26, 0x85, 0x8a, 0xab, 0x90, 0x39, 0x87, 0x73, 0xbe, 0x7b, 0xa2, 0x71, 0x0e,
	0xd6, 0x72, 0x09, 0x97, 0xa8, 0x35, 0x08, 0x87, 0x66, 0x06, 0xe6, 0x49, 0x09, 0xa0, 0x85, 0x41,
	0x87, 0x64, 0x7b, 0xce, 0x95, 0xa9, 0xf8, 0x92, 0x8a, 0x05, 0x77, 0x45, 0x1a, 0x8f, 0x24, 0xa2,
	0xcc, 0x80, 0xf1, 0x42, 0x31, 0xae, 0x35, 0x3a, 0xee, 0x14, 0x6a, 0xdb, 0xb8, 0xe3, 0x61, 0x50,
	0xeb, 0xbf, 0xb4, 0x9c, 0x33, 0xc8, 0x0b, 0xb7, 0x0c, 0xe2, 0x20, 0x34, 0x4d, 0x9b, 0x4f, 0x78,
	0xed, 0xf4, 0xaf, 0xc8, 0xa7, 0x9f, 0xff, 0xa3, 0x9d, 0x69, 0xcb, 0x41, 0xf2, 0xa8, 0x7f, 0x5b,
	0x3a, 0x89, 0x4a, 0xcb, 0xa0, 0xcd, 0x2a, 0x2e, 0x49, 0x4c, 0x6d, 0xc5, 0xa5, 0x07, 0xa5, 0xdf,
	0x00, 0x34, 0xe8, 0xf1, 0x2e, 0x6d, 0xd0, 0x7e, 0x94, 0x2b, 0x8f, 0x96, 0x24, 0xaf, 0xef, 0x1f,
	0x6f, 0xff, 0x46, 0xc9, 0x1e, 0xc3, 0x90, 0xc8, 0x02, 0x90, 0x65, 0x3e, 0xed, 0xbc, 0x37, 0x21,
	0xcf, 0x9d, 0xba, 0x1b, 0xa5, 0x81, 0x4c, 0xe8, 0xea, 0x36, 0x74, 0x8d, 0xe9, 0x0e, 0x1e, 0x4b,
	0xb0, 0xee, 0x4f, 0xf5, 0x99, 0xd2, 0xe0, 0xeb, 0x5f, 0x7a, 0xd1, 0xa0, 0x7d, 0x6e, 0xc6, 0xc5,
	0x03, 0x39, 0xde, 0x00, 0x50, 0xbb, 0x36, 0x11, 0x1c, 0xd5, 0x04, 0xe3, 0x64, 0x7f, 0xdd, 0x00,
	0x3e, 0xc0, 0x23, 0xe8, 0xa8, 0x7f, 0xad, 0x05, 0xe6, 0xad, 0x05, 0x86, 0x6d, 0x00, 0xff, 0xfa,
	0xfb, 0xc5, 0x55, 0x88, 0xec, 0x9c, 0x7c, 0x71, 0x78, 0x7f, 0x20, 0x95, 0x5b, 0x94, 0x29, 0x15,
	0x98, 0xb3, 0x50, 0x72, 0x22, 0xd0, 0x14, 0xac, 0x69, 0x4a, 0xb7, 0xea, 0xd4, 0xb3, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x81, 0xd9, 0x46, 0x42, 0xbf, 0x02, 0x00, 0x00,
}
