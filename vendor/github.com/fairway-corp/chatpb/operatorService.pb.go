// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operatorService.proto

package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import swagchat_protobuf3 "github.com/swagchat/protobuf"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BotService service

type BotServiceClient interface {
	PostBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*Bot, error)
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*Bot, error)
}

type botServiceClient struct {
	cc *grpc.ClientConn
}

func NewBotServiceClient(cc *grpc.ClientConn) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) PostBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotService/PostBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := grpc.Invoke(ctx, "/fairway.chatpb.BotService/GetBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotService service

type BotServiceServer interface {
	PostBot(context.Context, *CreateBotRequest) (*Bot, error)
	GetBot(context.Context, *GetBotRequest) (*Bot, error)
}

func RegisterBotServiceServer(s *grpc.Server, srv BotServiceServer) {
	s.RegisterService(&_BotService_serviceDesc, srv)
}

func _BotService_PostBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).PostBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotService/PostBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).PostBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.BotService/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostBot",
			Handler:    _BotService_PostBot_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _BotService_GetBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operatorService.proto",
}

// Client API for GuestService service

type GuestServiceClient interface {
	CreateUser(ctx context.Context, in *CreateGuestRequest, opts ...grpc.CallOption) (*swagchat_protobuf3.User, error)
	GetUser(ctx context.Context, in *GetGuestRequest, opts ...grpc.CallOption) (*swagchat_protobuf3.User, error)
}

type guestServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuestServiceClient(cc *grpc.ClientConn) GuestServiceClient {
	return &guestServiceClient{cc}
}

func (c *guestServiceClient) CreateUser(ctx context.Context, in *CreateGuestRequest, opts ...grpc.CallOption) (*swagchat_protobuf3.User, error) {
	out := new(swagchat_protobuf3.User)
	err := grpc.Invoke(ctx, "/fairway.chatpb.GuestService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestServiceClient) GetUser(ctx context.Context, in *GetGuestRequest, opts ...grpc.CallOption) (*swagchat_protobuf3.User, error) {
	out := new(swagchat_protobuf3.User)
	err := grpc.Invoke(ctx, "/fairway.chatpb.GuestService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuestService service

type GuestServiceServer interface {
	CreateUser(context.Context, *CreateGuestRequest) (*swagchat_protobuf3.User, error)
	GetUser(context.Context, *GetGuestRequest) (*swagchat_protobuf3.User, error)
}

func RegisterGuestServiceServer(s *grpc.Server, srv GuestServiceServer) {
	s.RegisterService(&_GuestService_serviceDesc, srv)
}

func _GuestService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.GuestService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServiceServer).CreateUser(ctx, req.(*CreateGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.GuestService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServiceServer).GetUser(ctx, req.(*GetGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.GuestService",
	HandlerType: (*GuestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GuestService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GuestService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operatorService.proto",
}

// Client API for GuestSettingService service

type GuestSettingServiceClient interface {
	CreateGuestSetting(ctx context.Context, in *CreateGuestSettingRequest, opts ...grpc.CallOption) (*GuestSetting, error)
	GetGuestSetting(ctx context.Context, in *GetGuestSettingRequest, opts ...grpc.CallOption) (*GuestSetting, error)
	UpdateGuestSetting(ctx context.Context, in *UpdateGuestSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type guestSettingServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuestSettingServiceClient(cc *grpc.ClientConn) GuestSettingServiceClient {
	return &guestSettingServiceClient{cc}
}

func (c *guestSettingServiceClient) CreateGuestSetting(ctx context.Context, in *CreateGuestSettingRequest, opts ...grpc.CallOption) (*GuestSetting, error) {
	out := new(GuestSetting)
	err := grpc.Invoke(ctx, "/fairway.chatpb.GuestSettingService/CreateGuestSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestSettingServiceClient) GetGuestSetting(ctx context.Context, in *GetGuestSettingRequest, opts ...grpc.CallOption) (*GuestSetting, error) {
	out := new(GuestSetting)
	err := grpc.Invoke(ctx, "/fairway.chatpb.GuestSettingService/GetGuestSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestSettingServiceClient) UpdateGuestSetting(ctx context.Context, in *UpdateGuestSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.GuestSettingService/UpdateGuestSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuestSettingService service

type GuestSettingServiceServer interface {
	CreateGuestSetting(context.Context, *CreateGuestSettingRequest) (*GuestSetting, error)
	GetGuestSetting(context.Context, *GetGuestSettingRequest) (*GuestSetting, error)
	UpdateGuestSetting(context.Context, *UpdateGuestSettingRequest) (*google_protobuf1.Empty, error)
}

func RegisterGuestSettingServiceServer(s *grpc.Server, srv GuestSettingServiceServer) {
	s.RegisterService(&_GuestSettingService_serviceDesc, srv)
}

func _GuestSettingService_CreateGuestSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSettingServiceServer).CreateGuestSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.GuestSettingService/CreateGuestSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSettingServiceServer).CreateGuestSetting(ctx, req.(*CreateGuestSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestSettingService_GetGuestSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSettingServiceServer).GetGuestSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.GuestSettingService/GetGuestSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSettingServiceServer).GetGuestSetting(ctx, req.(*GetGuestSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestSettingService_UpdateGuestSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuestSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSettingServiceServer).UpdateGuestSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.GuestSettingService/UpdateGuestSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSettingServiceServer).UpdateGuestSetting(ctx, req.(*UpdateGuestSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuestSettingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.GuestSettingService",
	HandlerType: (*GuestSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGuestSetting",
			Handler:    _GuestSettingService_CreateGuestSetting_Handler,
		},
		{
			MethodName: "GetGuestSetting",
			Handler:    _GuestSettingService_GetGuestSetting_Handler,
		},
		{
			MethodName: "UpdateGuestSetting",
			Handler:    _GuestSettingService_UpdateGuestSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operatorService.proto",
}

// Client API for OperatorSettingService service

type OperatorSettingServiceClient interface {
	CreateOperatorSetting(ctx context.Context, in *CreateOperatorSettingRequest, opts ...grpc.CallOption) (*OperatorSetting, error)
	GetOperatorSetting(ctx context.Context, in *GetOperatorSettingRequest, opts ...grpc.CallOption) (*OperatorSetting, error)
	UpdateOperatorSetting(ctx context.Context, in *UpdateOperatorSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type operatorSettingServiceClient struct {
	cc *grpc.ClientConn
}

func NewOperatorSettingServiceClient(cc *grpc.ClientConn) OperatorSettingServiceClient {
	return &operatorSettingServiceClient{cc}
}

func (c *operatorSettingServiceClient) CreateOperatorSetting(ctx context.Context, in *CreateOperatorSettingRequest, opts ...grpc.CallOption) (*OperatorSetting, error) {
	out := new(OperatorSetting)
	err := grpc.Invoke(ctx, "/fairway.chatpb.OperatorSettingService/CreateOperatorSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorSettingServiceClient) GetOperatorSetting(ctx context.Context, in *GetOperatorSettingRequest, opts ...grpc.CallOption) (*OperatorSetting, error) {
	out := new(OperatorSetting)
	err := grpc.Invoke(ctx, "/fairway.chatpb.OperatorSettingService/GetOperatorSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorSettingServiceClient) UpdateOperatorSetting(ctx context.Context, in *UpdateOperatorSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fairway.chatpb.OperatorSettingService/UpdateOperatorSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OperatorSettingService service

type OperatorSettingServiceServer interface {
	CreateOperatorSetting(context.Context, *CreateOperatorSettingRequest) (*OperatorSetting, error)
	GetOperatorSetting(context.Context, *GetOperatorSettingRequest) (*OperatorSetting, error)
	UpdateOperatorSetting(context.Context, *UpdateOperatorSettingRequest) (*google_protobuf1.Empty, error)
}

func RegisterOperatorSettingServiceServer(s *grpc.Server, srv OperatorSettingServiceServer) {
	s.RegisterService(&_OperatorSettingService_serviceDesc, srv)
}

func _OperatorSettingService_CreateOperatorSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSettingServiceServer).CreateOperatorSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.OperatorSettingService/CreateOperatorSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSettingServiceServer).CreateOperatorSetting(ctx, req.(*CreateOperatorSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorSettingService_GetOperatorSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSettingServiceServer).GetOperatorSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.OperatorSettingService/GetOperatorSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSettingServiceServer).GetOperatorSetting(ctx, req.(*GetOperatorSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorSettingService_UpdateOperatorSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatorSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSettingServiceServer).UpdateOperatorSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairway.chatpb.OperatorSettingService/UpdateOperatorSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSettingServiceServer).UpdateOperatorSetting(ctx, req.(*UpdateOperatorSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperatorSettingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairway.chatpb.OperatorSettingService",
	HandlerType: (*OperatorSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperatorSetting",
			Handler:    _OperatorSettingService_CreateOperatorSetting_Handler,
		},
		{
			MethodName: "GetOperatorSetting",
			Handler:    _OperatorSettingService_GetOperatorSetting_Handler,
		},
		{
			MethodName: "UpdateOperatorSetting",
			Handler:    _OperatorSettingService_UpdateOperatorSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operatorService.proto",
}

func init() { proto.RegisterFile("operatorService.proto", fileDescriptorOperatorService) }

var fileDescriptorOperatorService = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x6a, 0xdb, 0x40,
	0x14, 0x45, 0x65, 0x2f, 0x6c, 0x78, 0x94, 0x96, 0x8e, 0xb1, 0x0b, 0xaa, 0xdb, 0x1a, 0x2d, 0x0a,
	0x86, 0x76, 0x04, 0xea, 0xbe, 0x0b, 0x15, 0xa3, 0x45, 0x29, 0x0d, 0x09, 0x5e, 0x24, 0x1b, 0x33,
	0x52, 0xc6, 0xb2, 0x20, 0xd6, 0x28, 0x33, 0x4f, 0x31, 0xfe, 0x8b, 0x7c, 0x43, 0xd6, 0xf9, 0x8f,
	0xfc, 0x56, 0x90, 0x34, 0xe3, 0xd8, 0xb2, 0x62, 0x27, 0x59, 0x6a, 0xde, 0x7d, 0xf7, 0x9e, 0xb9,
	0x1a, 0xe8, 0x8b, 0x8c, 0x4b, 0x86, 0x42, 0x9e, 0x71, 0x79, 0x93, 0x44, 0x9c, 0x66, 0x52, 0xa0,
	0x20, 0xef, 0xe7, 0x2c, 0x91, 0x2b, 0xb6, 0xa6, 0xd1, 0x82, 0x61, 0x16, 0xda, 0xc3, 0x58, 0x88,
	0xf8, 0x8a, 0xbb, 0x2c, 0x4b, 0x5c, 0x96, 0xa6, 0x02, 0x19, 0x26, 0x22, 0x55, 0x95, 0xda, 0xfe,
	0xac, 0xa7, 0xe5, 0x57, 0x98, 0xcf, 0x5d, 0xbe, 0xcc, 0x70, 0xad, 0x87, 0x1f, 0x73, 0xc5, 0xe5,
	0x3f, 0xae, 0x14, 0x8b, 0xb5, 0xbb, 0xbd, 0x09, 0xdd, 0x39, 0xf6, 0x6e, 0x5b, 0x00, 0xbe, 0x40,
	0x4d, 0x42, 0x7c, 0xe8, 0x9e, 0x08, 0x85, 0xbe, 0x40, 0x32, 0xa2, 0xbb, 0x3c, 0xf4, 0x8f, 0xe4,
	0x0c, 0xb9, 0x2f, 0xf0, 0x94, 0x5f, 0xe7, 0x5c, 0xa1, 0xdd, 0xab, 0x2b, 0x7c, 0x81, 0x8e, 0x45,
	0x7e, 0x43, 0x27, 0xe0, 0xa5, 0xc5, 0x97, 0xba, 0xa0, 0x3a, 0x3f, 0xbc, 0xef, 0xdd, 0xb5, 0xe0,
	0x5d, 0x50, 0x08, 0x0c, 0xd4, 0x5f, 0x80, 0x2a, 0x7b, 0xaa, 0xb8, 0x24, 0x4e, 0x33, 0x57, 0xb9,
	0x61, 0x9c, 0x3f, 0x51, 0xb5, 0x62, 0x71, 0x31, 0xa7, 0xa6, 0x1f, 0x5a, 0x2c, 0x3b, 0x16, 0x99,
	0x40, 0x37, 0xe0, 0x58, 0x3a, 0x7d, 0x6b, 0xc0, 0x7b, 0xa1, 0x8d, 0x77, 0xdf, 0x86, 0x9e, 0x86,
	0x44, 0x4c, 0xd2, 0xd8, 0xb0, 0xce, 0x80, 0x6c, 0xf1, 0xe8, 0x21, 0x19, 0x1f, 0x60, 0xd6, 0x1a,
	0x93, 0x39, 0xdc, 0x83, 0xda, 0x12, 0x39, 0x16, 0x39, 0x87, 0x0f, 0x06, 0xd3, 0xb8, 0x7f, 0x7f,
	0xee, 0x1e, 0xaf, 0xb6, 0x26, 0xd3, 0xec, 0xf2, 0x28, 0xfb, 0xbe, 0xc6, 0x04, 0x0c, 0x68, 0xf5,
	0x28, 0x9f, 0xda, 0x9a, 0x14, 0x8f, 0xd2, 0xb1, 0xbc, 0x87, 0x36, 0x0c, 0xfe, 0x6f, 0x5e, 0xfd,
	0x4e, 0x63, 0x0b, 0xe8, 0x57, 0x6d, 0xd4, 0xe6, 0xe4, 0x47, 0x73, 0x69, 0x35, 0x99, 0xc9, 0xde,
	0xfb, 0x99, 0x35, 0x9d, 0x63, 0x91, 0x10, 0x48, 0xc0, 0xb1, 0x1e, 0x33, 0x6e, 0x68, 0xef, 0xed,
	0x19, 0x33, 0xe8, 0x57, 0xfd, 0x1c, 0xbd, 0x4d, 0xa3, 0xec, 0x68, 0x93, 0xfe, 0xe8, 0xe2, 0x6b,
	0x9c, 0xe0, 0x22, 0x0f, 0x69, 0x24, 0x96, 0xae, 0xf6, 0xfc, 0x19, 0x09, 0x99, 0xb9, 0x95, 0x71,
	0xd8, 0x29, 0x77, 0x7e, 0x3d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x06, 0xe2, 0xad, 0xe4, 0x67, 0x04,
	0x00, 0x00,
}
